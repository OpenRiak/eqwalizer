{"path":"app_a/src/app_a_errors_generated.erl","line":13,"char":10,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"'wrong_ret'","replacement":null,"description":"```lang=error,counterexample\n`'wrong_ret'`.\n\nExpected: 'foo'\nGot     : 'wrong_ret'\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":581,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"flatmap(thing_to_list/1, List)","replacement":null,"description":"```lang=error,counterexample\n`flatmap(thing_to_list/1, List)`.\n\nExpected: string()\nGot     : [term()]\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":593,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":600,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":618,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":1119,"char":36,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"H3","replacement":null,"description":"```lang=error,counterexample\n`H3`.\n\nExpected: [term()]\nGot     : term()\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"filtermap(eqwalizer:dynamic_cast(F), L)","replacement":null,"description":"```lang=error,counterexample\n`filtermap(eqwalizer:dynamic_cast(F), L)`.\n\nExpected: [T | X]\nGot     : [term()]\n```\n```\n  [term()] is not a subtype of [T | X]\n  because\n  term() is not a subtype of T | X\n  because\n  term() is not a subtype of T\n```\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":15,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"F","replacement":null,"description":"```lang=error,counterexample\n`F`.\n\nExpected: fun((term()) -> boolean() | {'true', term()})\nGot     : fun((T) -> boolean() | {'true', X})\n```\n```\n  fun((T) -> boolean() | {'true', X}) is not a subtype of fun((term()) -> boolean() | {'true', term()})\n  because\n  term() is not a subtype of T\n```\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a_mod2.erl","line":27,"char":1,"code":"ELP","name":"eqWAlizer: type_alias_is_non_productive","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nrecursive type invalid/0 is not productive\n```\n\n> [docs on `type_alias_is_non_productive`](https://fb.me/eqwalizer_errors#type_alias_is_non_productive)"}
{"path":"app_a/src/app_a_mod2.erl","line":36,"char":9,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpected: number()\nGot     : 'an_atom'\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_b/src/app_b.erl","line":21,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"L","replacement":null,"description":"```lang=error,counterexample\n`L`.\n\nExpected: T\nGot     : [T]\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":14,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpected: 'ok'\nGot     : 'error'\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":18,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpected: 'ok'\nGot     : 'error'\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":22,"char":13,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpected: number()\nGot     : 'an_atom'\n```\n\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":60,"char":5,"code":"ELP","name":"eqWAlizer: redundant_fixme","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nredundant fixme\n```\n\n> [docs on `redundant_fixme`](https://fb.me/eqwalizer_errors#redundant_fixme)"}
{"path":"app_a/src/app_a.erl","line":82,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{k_ok => term(), k_req1 := atom(), k_req2 := atom(), k_req3 := atom(), k_wrong1 => atom(), k_wrong2 => atom()}\nGot     : #S{k_extra => term(), k_ok => term(), k_req1 => term(), k_req2 => term(), k_wrong1 => pid(), k_wrong2 => pid()}\n```\n```\nThese associations do not match:\n\n  #S{\n+    k_extra  => ...\n-    k_req1   := ...\n+    k_req1   => ...\n-    k_req2   := ...\n+    k_req2   => ...\n-    k_req3   := ...\n     ...\n  }\n```\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":106,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\nGot     : id(#S{a := 'va', b := #S{c := #S{d => atom()}}})\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d => atom()}}}) is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d => atom()}}} is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d => atom()}} is not a subtype of #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d => atom()} is not a subtype of id(#S{d := atom(), e := atom()})\n```\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":129,"char":5,"code":"ELP","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\nGot     : id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}})\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}}) is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}} is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d := pid(), e := pid()}} is not a subtype of #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d := pid(), e := pid()} is not a subtype of id(#S{d := atom(), e := atom()})\n```\n> [docs on `expected_subtype`](https://fb.me/eqwalizer_errors#expected_subtype)"}
