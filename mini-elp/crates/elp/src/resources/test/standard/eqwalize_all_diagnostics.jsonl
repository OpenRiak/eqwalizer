{"path":"app_b/src/app_b.erl","line":21,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"L","replacement":null,"description":"```lang=error,counterexample\n`L`.\n\nExpression has type:   [T]\nContext expected type: T\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_lists.erl","line":581,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"flatmap(thing_to_list/1, List)","replacement":null,"description":"```lang=error,counterexample\n`flatmap(thing_to_list/1, List)`.\n\nExpression has type:   [term()]\nContext expected type: string()\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_lists.erl","line":593,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":600,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":618,"char":29,"code":"ELP","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fb.me/eqwalizer_errors#recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":1119,"char":36,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"H3","replacement":null,"description":"```lang=error,counterexample\n`H3`.\n\nExpression has type:   term()\nContext expected type: [term()]\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"filtermap(eqwalizer:dynamic_cast(F), L)","replacement":null,"description":"```lang=error,counterexample\n`filtermap(eqwalizer:dynamic_cast(F), L)`.\n\nExpression has type:   [term()]\nContext expected type: [T | X]\n```\n```\n  [term()] is not compatible with [T | X]\n  because\n  term() is not compatible with T | X\n  because\n  term() is not compatible with T\n```\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":15,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"F","replacement":null,"description":"```lang=error,counterexample\n`F`.\n\nExpression has type:   fun((T) -> boolean() | {'true', X})\nContext expected type: fun((term()) -> boolean() | {'true', term()})\n```\n```\n  fun((T) -> boolean() | {'true', X}) is not compatible with fun((term()) -> boolean() | {'true', term()})\n  because\n  term() is not compatible with T\n```\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_errors_generated.erl","line":13,"char":10,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"'wrong_ret'","replacement":null,"description":"```lang=error,counterexample\n`'wrong_ret'`.\n\nExpression has type:   'wrong_ret'\nContext expected type: 'foo'\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a_mod2.erl","line":27,"char":1,"code":"ELP","name":"eqWAlizer: type_alias_is_non_productive","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nrecursive type invalid/0 is not productive\n```\n\n> [docs on `type_alias_is_non_productive`](https://fb.me/eqwalizer_errors#type_alias_is_non_productive)"}
{"path":"app_a/src/app_a_mod2.erl","line":36,"char":9,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpression has type:   'an_atom'\nContext expected type: number()\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":14,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpression has type:   'error'\nContext expected type: 'ok'\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":18,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpression has type:   'error'\nContext expected type: 'ok'\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":22,"char":13,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpression has type:   'an_atom'\nContext expected type: number()\n```\n\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":60,"char":5,"code":"ELP","name":"eqWAlizer: redundant_fixme","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nredundant fixme\n```\n\n> [docs on `redundant_fixme`](https://fb.me/eqwalizer_errors#redundant_fixme)"}
{"path":"app_a/src/app_a.erl","line":82,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpression has type:   #S{k_extra => term(), k_ok => term(), k_req1 => term(), k_req2 => term(), k_wrong1 => pid(), k_wrong2 => pid()}\nContext expected type: #S{k_ok => term(), k_req1 := atom(), k_req2 := atom(), k_req3 := atom(), k_wrong1 => atom(), k_wrong2 => atom()}\n```\n```\nThese associations do not match:\n\n  #S{\n+    k_extra  => ...\n-    k_req1   := ...\n+    k_req1   => ...\n-    k_req2   := ...\n+    k_req2   => ...\n-    k_req3   := ...\n     ...\n  }\n```\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":106,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpression has type:   id(#S{a := 'va', b := #S{c := #S{d => atom()}}})\nContext expected type: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d => atom()}}}) is not compatible with #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d => atom()}}} is not compatible with #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d => atom()}} is not compatible with #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d => atom()} is not compatible with id(#S{d := atom(), e := atom()})\n```\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
{"path":"app_a/src/app_a.erl","line":129,"char":5,"code":"ELP","name":"eqWAlizer: incompatible_types","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpression has type:   id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}})\nContext expected type: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}}) is not compatible with #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}} is not compatible with #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d := pid(), e := pid()}} is not compatible with #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d := pid(), e := pid()} is not compatible with id(#S{d := atom(), e := atom()})\n```\n> [docs on `incompatible_types`](https://fb.me/eqwalizer_errors#incompatible_types)"}
