{"path":"app_a/include/app_a.hrl","line":1,"char":null,"code":"ELP","severity":"advice","name":"ELP","original":null,"replacement":null,"description":"Please remove `-typing([eqwalizer])`. Only .erl files can be checked."}
{"path":"app_a/test/app_a_SUITE.erl","line":1,"char":null,"code":"ELP","severity":"advice","name":"ELP","original":null,"replacement":null,"description":"Please remove `-typing([eqwalizer])`. SUITE modules are not checked when eqWAlizing a project."}
{"path":"eqwalizer/src/eqwalizer.erl","line":1,"char":null,"code":"ELP","severity":"advice","name":"ELP","original":null,"replacement":null,"description":"ðŸŽ‰ This module has no type errors, please consider adding attribute `-typing([eqwalizer]).` to help you keep it that way: https://fburl.com/eqwalizer"}
{"path":"app_a/src/app_a_lists.erl","line":581,"char":5,"code":"ELP","severity":"disabled","name":"eqWAlizer: expected_subtype","original":"flatmap(thing_to_list/1, List)","replacement":null,"description":"```lang=error,counterexample\n`flatmap(thing_to_list/1, List)`.\n\nExpected: string()\nGot     : [any()]\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":593,"char":29,"code":"ELP","severity":"disabled","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fburl.com/eqwalizer_recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":600,"char":29,"code":"ELP","severity":"disabled","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fburl.com/eqwalizer_recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":618,"char":29,"code":"ELP","severity":"disabled","name":"eqWAlizer: recursive_constraint","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nRecursive constraint: DeepList\n```\n\n> [docs on `recursive_constraint`](https://fburl.com/eqwalizer_recursive_constraint)"}
{"path":"app_a/src/app_a_lists.erl","line":1119,"char":36,"code":"ELP","severity":"disabled","name":"eqWAlizer: expected_subtype","original":"H3","replacement":null,"description":"```lang=error,counterexample\n`H3`.\n\nExpected: [any()]\nGot     : any()\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":5,"code":"ELP","severity":"disabled","name":"eqWAlizer: expected_subtype","original":"filtermap(eqwalizer:dynamic_cast(F), L)","replacement":null,"description":"```lang=error,counterexample\n`filtermap(eqwalizer:dynamic_cast(F), L)`.\n\nExpected: [T | X]\nGot     : [any()]\n```\n```\n  [any()] is not a subtype of [T | X]\n  because\n  any() is not a subtype of T | X\n```\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a_lists.erl","line":1310,"char":15,"code":"ELP","severity":"disabled","name":"eqWAlizer: expected_subtype","original":"F","replacement":null,"description":"```lang=error,counterexample\n`F`.\n\nExpected: fun((any()) -> boolean() | {'true', any()})\nGot     : fun((T) -> boolean() | {'true', X})\n```\n```\n  fun((T) -> boolean() | {'true', X}) is not a subtype of fun((any()) -> boolean() | {'true', any()})\n  because\n  any() is not a subtype of T\n```\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a_mod2.erl","line":27,"char":1,"code":"ELP","severity":"warning","name":"eqWAlizer: type_alias_is_non_productive","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nrecursive type invalid/0 is not productive\n```\n\n> [docs on `type_alias_is_non_productive`](https://fburl.com/eqwalizer_type_alias_is_non_productive)"}
{"path":"app_a/src/app_a_mod2.erl","line":36,"char":9,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpected: number()\nGot     : 'an_atom'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/test/app_a_SUITE.erl","line":23,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"app_a_test_helpers:fail()","replacement":null,"description":"```lang=error,counterexample\n`app_a_test_helpers:fail()`.\n\nExpected: 'ok'\nGot     : 'error'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/test/app_a_test_helpers.erl","line":11,"char":11,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"'wrong_ret'","replacement":null,"description":"```lang=error,counterexample\n`'wrong_ret'`.\n\nExpected: 'error'\nGot     : 'wrong_ret'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":14,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpected: 'ok'\nGot     : 'error'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":18,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"'error'","replacement":null,"description":"```lang=error,counterexample\n`'error'`.\n\nExpected: 'ok'\nGot     : 'error'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":22,"char":13,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"'an_atom'","replacement":null,"description":"```lang=error,counterexample\n`'an_atom'`.\n\nExpected: number()\nGot     : 'an_atom'\n```\n\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":60,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: redundant_fixme","original":null,"replacement":null,"description":"```lang=error,counterexample\n\nredundant fixme\n```\n\n> [docs on `redundant_fixme`](https://fburl.com/eqwalizer_redundant_fixme)"}
{"path":"app_a/src/app_a.erl","line":82,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{k_ok => any(), k_req1 := atom(), k_req2 := atom(), k_req3 := atom(), k_wrong1 => atom(), k_wrong2 => atom()}\nGot     : #S{k_extra => any(), k_ok => any(), k_req1 => any(), k_req2 => any(), k_wrong1 => pid(), k_wrong2 => pid()}\n```\n```\nThese associations do not match:\n\n  #S{\n+    k_extra  => ...\n-    k_req1   := ...\n+    k_req1   => ...\n-    k_req2   := ...\n+    k_req2   => ...\n-    k_req3   := ...\n     ...\n  }\n```\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":106,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\nGot     : id(#S{a := 'va', b := #S{c := #S{d => atom()}}})\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d => atom()}}}) is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d => atom()}}} is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d => atom()}} is not a subtype of #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d => atom()} is not a subtype of id(#S{d := atom(), e := atom()})\n```\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
{"path":"app_a/src/app_a.erl","line":129,"char":5,"code":"ELP","severity":"warning","name":"eqWAlizer: expected_subtype","original":"X","replacement":null,"description":"```lang=error,counterexample\n`X`.\n\nExpected: #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\nGot     : id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}})\n```\n```\n  id(#S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}}) is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'b':\n  #S{a := 'va', b := #S{c := #S{d := pid(), e := pid()}}} is not a subtype of #S{a := 'va', b := #S{c := id(#S{d := atom(), e := atom()})}}\n  because\n  at shape key 'c':\n  #S{c := #S{d := pid(), e := pid()}} is not a subtype of #S{c := id(#S{d := atom(), e := atom()})}\n  because\n  #S{d := pid(), e := pid()} is not a subtype of id(#S{d := atom(), e := atom()})\n```\n> [docs on `expected_subtype`](https://fburl.com/eqwalizer_expected_subtype)"}
