%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(contravariant).                    |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-type contravariant(X) :: fun((X) -> ok).  |         |
                                           |         |
-type ref_contravariant(X) :: contravarian……         |
                                           |         |
-type ref_contravariant_ab() :: ref_contra……         |
                                           |         |
-opaque opaque_contra(X) :: fun((X) -> ok)…… INVALID | Opaque opaque_contra expands to a type in which X appears in function parameter position
                                           |         | 	opaque_contra expands to fun((X) -> 'ok')
                                           |         |
-opaque opaque_ref_contra(X) :: ref_contra…… INVALID | Opaque opaque_ref_contra expands to a type in which X appears in function parameter position
                                           |         | 	opaque_ref_contra expands to contravariant:ref_contravariant(X)
                                           |         | 	which expands to contravariant:contravariant(X)
                                           |         | 	which expands to fun((X) -> 'ok')
                                           |         |
-opaque opaque_ref_contra_ab() :: ref_cont……         |
                                           |         |
-opaque opaque_ref_opaque(X) :: opaque_con…… INVALID | opaque_ref_opaque/1 references type with invalid definition: opaque_contra/1

                                           |         |
-opaque recur_contra(X) :: fun((recur_cont……         |
                                           |         |
-type complex_expansion_1(X) :: #{a => con……         |
                                           |         |
-type complex_expansion_2(X) :: {complex_e……         |
                                           |         |
-opaque complex_expansion_opaque(X) :: com…… INVALID | Opaque complex_expansion_opaque expands to a type in which X appears in function parameter position
                                           |         | 	complex_expansion_opaque expands to contravariant:complex_expansion_2(X)
                                           |         | 	which expands to {contravariant:complex_expansion_2(X), contravariant:complex_expansion_1(X)} | 'nil'
                                           |         | 	which expands to {contravariant:complex_expansion_2(X), #S{a => contravariant:contravariant(X)}} | 'nil'
                                           |         | 	which expands to {contravariant:complex_expansion_2(X), #S{a => fun((X) -> 'ok')}} | 'nil'
                                           |         |
-opaque contra_in_res(X) :: fun((a) -> con…… INVALID | Opaque contra_in_res expands to a type in which X appears in function parameter position
                                           |         | 	contra_in_res expands to fun(('a') -> contravariant:contravariant(X))
                                           |         | 	which expands to fun(('a') -> fun((X) -> 'ok'))
                                           |         |
-opaque opaque_ok(X) :: X.                 |         |
                                           |         |
-opaque contra_in_opaque(X) :: opaque_ok(c……         |
                                           |         |
-record(my_rec, {a :: eqwalizer:refinable(……         |
                                           |         |
-opaque contra_in_rec_ref(X) :: #my_rec{a …… INVALID | Opaque contra_in_rec_ref expands to a type in which X appears in function parameter position
                                           |         | 	contra_in_rec_ref expands to #my_rec{}
                                           |         | 	which expands to #my_rec{}
                                           |         |
-opaque contra_in_dict_values(X) :: #{atom…… INVALID | Opaque contra_in_dict_values expands to a type in which X appears in function parameter position
                                           |         | 	contra_in_dict_values expands to #D{atom() => contravariant:contravariant(X)}
                                           |         | 	which expands to #D{atom() => fun((X) -> 'ok')}
                                           |         |
-opaque contra_in_shape(X) :: #{a => ok, b…… INVALID | Opaque contra_in_shape expands to a type in which X appears in function parameter position
                                           |         | 	contra_in_shape expands to #S{a => 'ok', b := 'ok', c := contravariant:contravariant(X)}
                                           |         | 	which expands to #S{a => 'ok', b := 'ok', c := fun((X) -> 'ok')}
                                           |         |
-spec contravariant_subtype                |         |
    (ref_contravariant_ab()) ->            |         |
    ref_contravariant(a).                  |         |
contravariant_subtype(F) -> F.             | OK      |
                                           |         |
-spec contravariant_subtype_neg            |         |
    (ref_contravariant(a)) ->              |         |
    ref_contravariant_ab().                |         |
contravariant_subtype_neg(F) -> F.         | ERROR   | F.
                                           |         | Expected: ref_contravariant_ab()
                                           |         | Got     : ref_contravariant('a')
                                           |         | 
                                           |         |   ref_contravariant('a') is not a subtype of ref_contravariant_ab()
                                           |         |   because
                                           |         |   contravariant('a') is not a subtype of ref_contravariant_ab()
                                           |         |   because
                                           |         |   fun(('a') -> 'ok') is not a subtype of ref_contravariant_ab()
                                           |         |   because
                                           |         |   fun(('a') -> 'ok') is not a subtype of ref_contravariant('a' | 'b')
                                           |         |
-type runnable(A) :: fun((A) -> ok).       |         |
-type id(A) :: fun((A) -> A).              |         |
                                           |         |
-spec log(term()) -> ok.                   |         |
log(Thing) ->                              | OK      |
    io:format("~p~n", [Thing]).            |         |
                                           |         |
-spec log_runnable1                        |         |
    (runnable(A)) -> runnable(A).          |         |
log_runnable1(F) ->                        | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_runnable2                        |         |
    (fun((A) -> ok)) -> fun((A) -> ok).    |         |
log_runnable2(F) ->                        | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_runnable3                        |         |
    (runnable(atom())) -> runnable(atom())……         |
log_runnable3(F) ->                        | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_runnable4                        |         |
    (fun((atom()) -> ok)) -> fun((atom()) ……         |
log_runnable4(F) ->                        | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_id1                              |         |
    (id(A)) -> id(A).                      |         |
log_id1(F) ->                              | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_id2                              |         |
    (fun((A) -> A)) -> fun((A) -> A).      |         |
log_id2(F) ->                              | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_id3                              |         |
    (id(atom())) -> id(atom()).            |         |
log_id3(F) ->                              | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec log_id4                              |         |
    (fun((atom()) -> atom())) -> fun((atom……         |
log_id4(F) ->                              | OK      |
    fun(A) ->                              |         |
        log(A),                            |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-type stream(A) :: eos | {head, A}.        |         |
-type predicate(A) :: fail | {next, fun((s……         |
                                           |         |
-spec id_predicate(predicate(A)) -> predic……         |
id_predicate(P) -> P.                      | OK      |
                                           |         |
-spec wrap_id(predicate(A)) -> predicate(A……         |
wrap_id(P) -> id_predicate(P).             | ERROR   | P.
                                           |         | Expected: predicate(A)
                                           |         | Got     : predicate(A)
                                           |         | 
                                           |         |   predicate(A) is not a subtype of predicate(A)
                                           |         |   because
                                           |         |   'fail' | {'next', fun((stream(A)) -> predicate(A))} is not a subtype of predicate(A)
                                           |         |   because
                                           |         |   'fail' | {'next', fun((stream(A)) -> predicate(A))} is not a subtype of 'fail' | {'next', fun((stream(A)) -> predicate(A))}
                                           |         |   because
                                           |         |   {'next', fun((stream(A)) -> predicate(A))} is not a subtype of 'fail' | {'next', fun((stream(A)) -> predicate(A))}
                                           |         |
-type constant(X) :: {a, constant(X)} | ni……         |
                                           |         |
-spec constant_f(constant(X)) -> constant(……         |
constant_f(C) -> C.                        | OK      |
                                           |         |
-spec apply_f(constant(X)) -> constant(X). |         |
apply_f(C) -> constant_f(C).               | OK      |
                                           |         |
-spec hd_contravariant([predicate(A)]) -> ……         |
hd_contravariant([F | _]) -> F.            | OK      |
                                           |         |
-spec test_contravariant() -> (predicate(t……         |
test_contravariant() -> hd_contravariant([…… ERROR   | hd_contravariant([]).
                                           |         | Expected: predicate(term())
                                           |         | Got     : predicate(none())
                                           |         | 
                                           |         |   predicate(none()) is not a subtype of predicate(term())
                                           |         |   because
                                           |         |   'fail' | {'next', fun((stream(none())) -> predicate(none()))} is not a subtype of predicate(term())
                                           |         |   because
                                           |         |   'fail' | {'next', fun((stream(none())) -> predicate(none()))} is not a subtype of 'fail' | {'next', fun((stream(term())) -> predicate(term()))}
                                           |         |   because
                                           |         |   {'next', fun((stream(none())) -> predicate(none()))} is not a subtype of 'fail' | {'next', fun((stream(term())) -> predicate(term()))}
