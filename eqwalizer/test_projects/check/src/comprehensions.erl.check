%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(comprehensions).                   |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec gen_atom(any()) -> atom().           |         |
gen_atom(A) when is_atom(A) -> A;          | OK      |
gen_atom(_) -> not_atom.                   |         |
                                           |         |
-spec gen_number(any()) -> number().       |         |
gen_number(N) when is_number(N) -> N;      | OK      |
gen_number(_) -> 0.                        |         |
                                           |         |
-spec test01                               |         |
    ([{atom()} | {atom(), number()}]) ->   |         |
    [atom()].                              |         |
test01(L) ->                               | OK      |
    [A || {A} <- L].                       |         |
                                           |         |
-spec test02_neg                           |         |
    ([{atom()} | {atom(), number()}]) ->   |         |
    [atom()].                              |         |
test02_neg(L) ->                           | ERROR   |
    [N || {_, N} <- L].                    |         | [ || ].
                                           |         | Expected: [atom()]
                                           |         | Got     : [number()]
                                           |         | 
                                           |         |   [number()] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   number() is not a subtype of atom()
                                           |         |
-spec test03                               |         |
    ([{atom()} | {atom(), number()}]) ->   |         |
    {[atom()], x}.                         |         |
test03(L) ->                               | OK      |
    Atoms = [gen_atom(X) || X <- L],       |         |
    X = x,                                 |         |
    {Atoms, X}.                            |         |
                                           |         |
-spec test04_neg(any()) -> [any()].        |         |
test04_neg(L) ->                           | ERROR   |
    [X || X <- L].                         |         | L.
                                           |         | Expected: [term()]
                                           |         | Got     : term()
                                           |         |
-spec test05(binary()) -> [number()].      |         |
test05(B) ->                               | OK      |
    [Y || <<Y>> <= B ].                    |         |
                                           |         |
-spec test06_neg(binary()) -> list(any()). |         |
test06_neg(B) ->                           | ERROR   |
    << Y || <<Y>> <= B >>.                 |         | << || >>.
                                           |         | Expected: [term()]
                                           |         | Got     : binary()
                                           |         |
-spec test07(list(binary())) -> binary().  |         |
test07(LB) ->                              | OK      |
    << Y || Y <- LB >>.                    |         |
                                           |         |
-spec test08_neg(binary()) -> binary().    |         |
test08_neg(B) ->                           | ERROR   |
    << Y || Y <- B >>.                     |         | B.
                                           |         | Expected: [term()]
                                           |         | Got     : binary()
                                           |         |
-spec test09_neg(list(binary())) -> binary……         |
test09_neg(LB) ->                          | ERROR   |
    << Y || <<Y>> <= LB >>.                |         | LB.
                                           |         | Expected: binary()
                                           |         | Got     : [binary()]
                                           |         |
-spec test10(binary()) -> [number()].      |         |
test10(LB) ->                              | OK      |
    [ Y || <<Y>> <= LB ].                  |         |
                                           |         |
-spec test11_neg(binary()) -> [binary()].  |         |
test11_neg(LB) ->                          | ERROR   |
    [ Y || <<Y>> <= LB ].                  |         | [ || ].
                                           |         | Expected: [binary()]
                                           |         | Got     : [number()]
                                           |         | 
                                           |         |   [number()] is not a subtype of [binary()]
                                           |         |   because
                                           |         |   number() is not a subtype of binary()
                                           |         |
-spec test12(binary()) -> [binary()].      |         |
test12(LB) ->                              | ERROR   |
    << Y || <<Y>> <= LB >>.                |         | << || >>.
                                           |         | Expected: [binary()]
                                           |         | Got     : binary()
                                           |         |
-spec test13_neg(binary()) -> binary().    |         |
test13_neg(LB) ->                          | ERROR   |
    << Y || <<Y>> <= LB >>.                |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : number()
                                           |         |
-spec test14(binary()) -> binary().        |         |
test14(LB) ->                              | OK      |
    << <<Y>> || <<Y>> <= LB >>.            |         |
                                           |         |
-spec test15_neg(binary()) -> binary().    |         |
test15_neg(LB) ->                          | OK      |
    << <<Y>> ||                            |         |
        <<Y>> <= LB,                       |         |
        gen_atom(Y) >>.                    |         |
                                           |         |
-spec test16_neg(any()) -> [any()].        |         |
test16_neg(L) ->                           | ERROR   |
    Res = [X || X <- L],                   |         | L.
                                           |         | Expected: [term()]
                                           |         | Got     : term()
    Res.                                   |         |
                                           |         |
-spec test17(binary()) -> [number()].      |         |
test17(LB) ->                              | OK      |
    Res = [ Y || <<Y>> <= LB ],            |         |
    Res.                                   |         |
                                           |         |
-spec test18_neg(boolean()) -> [boolean()]……         |
test18_neg(L) ->                           | ERROR   |
    Res = [X || X <- L, X],                |         | L.
                                           |         | Expected: [term()]
                                           |         | Got     : boolean()
    Res.                                   |         |
                                           |         |
-spec test19([boolean()]) -> [binary()].   |         |
test19(L) ->                               | OK      |
    Res = [erlang:atom_to_binary(X) ||     |         |
            X <- L, X],                    |         |
    Res.                                   |         |
                                           |         |
-spec test20(binary()) -> binary().        |         |
test20(LB) ->                              | OK      |
    Res = << <<Y>> || <<Y>> <= LB >>,      |         |
    Res.                                   |         |
                                           |         |
-spec test21_neg(list(binary())) -> binary……         |
test21_neg(LB) ->                          | ERROR   |
    Res = << Y || <<Y>> <= LB >>,          |         | LB.
                                           |         | Expected: binary()
                                           |         | Got     : [binary()]
    Res.                                   |         |
                                           |         |
-spec test22_neg(binary()) -> binary().    |         |
test22_neg(B) ->                           | ERROR   |
    Res = << Y || Y <- B >>,               |         | B.
                                           |         | Expected: [term()]
                                           |         | Got     : binary()
    Res.                                   |         |
                                           |         |
-spec test23([binary()]) -> binary().      |         |
test23(B) ->                               | OK      |
    Res = << Y || Y <- B >>,               |         |
    Res.                                   |         |
                                           |         |
-spec test24([boolean()]) -> binary().     |         |
test24(B) ->                               | OK      |
    Res = << (erlang:atom_to_binary(Y)) || |         |
            Y <- B, Y >>,                  |         |
    Res.                                   |         |
                                           |         |
-spec num_atom(number(), atom())           |         |
    -> number().                           |         |
num_atom(_, _) -> 3.                       | OK      |
                                           |         |
-spec test25                               |         |
    ([{number()} | [atom()]]) ->           |         |
    [number()].                            |         |
test25(L) ->                               | OK      |
    [num_atom(A, B) + 1 ||                 |         |
        {A} <- L, [B] <- L].               |         |
                                           |         |
-spec test26(none()) -> list().            |         |
test26(X) -> [Y || Y <- X].                | OK      |
                                           |         |
-spec test27(none()) -> list().            |         |
test27(X) ->                               | OK      |
    Res = [Y || Y <- X],                   |         |
    Res.                                   |         |
                                           |         |
-spec test28(none()) -> number().          |         |
test28(X) ->                               | ERROR   |
    << Y ||                                |         | << || >>.
                                           |         | Expected: number()
                                           |         | Got     : binary()
        <<Y>> <= X >>.                     |         |
                                           |         |
-spec test29(none()) -> number().          |         |
test29(X) ->                               | ERROR   |
    Res = << Y ||                          |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : number()
        <<Y>> <= X >>,                     |         |
    Res.                                   |         |
                                           |         |
-spec test30(none()) -> binary().          |         |
test30(X) ->                               | ERROR   |
    << Y ||                                |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : number()
        <<Y>> <= X >>.                     |         |
                                           |         |
-spec test31(none()) -> binary().          |         |
test31(X) ->                               | ERROR   |
    Res = << Y ||                          |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : number()
        <<Y>> <= X >>,                     |         |
    Res.                                   |         |
                                           |         |
-spec test32([any()]) -> [atom()].         |         |
test32(L) ->                               | OK      |
    Res = [X || X <- L, is_atom(X)],       |         |
    Res.                                   |         |
                                           |         |
-spec test33_neg([any()]) -> [binary()].   |         |
test33_neg(L) ->                           | ERROR   |
    Res = [X || X <- L, is_atom(X)],       |         |
    Res.                                   |         | Res.
                                           |         | Expected: [binary()]
                                           |         | Got     : [atom()]
                                           |         | 
                                           |         |   [atom()] is not a subtype of [binary()]
                                           |         |   because
                                           |         |   atom() is not a subtype of binary()
                                           |         |
-spec convert_data(binary())               |         |
        -> [integer()].                    |         |
convert_data(Bin) ->                       | OK      |
    Lines =                                |         |
        string:split(Bin, "\n", all),      |         |
    IntOrErrors = [                        |         |
        string:to_integer(Line)            |         |
        || Line <- Lines                   |         |
    ],                                     |         |
    [Int ||                                |         |
        {Int, _Rest} <- IntOrErrors,       |         |
        is_integer(Int)                    |         |
    ].                                     |         |
                                           |         |
-spec convert_data2(binary())              |         |
        -> [integer()].                    |         |
convert_data2(Bin) ->                      | OK      |
    Lines =                                |         |
        string:split(Bin, "\n", all),      |         |
    IntOrErrors = [                        |         |
        string:to_integer(Line)            |         |
        || Line <- Lines                   |         |
    ],                                     |         |
    Res = [Int ||                          |         |
        {Int, _Rest} <- IntOrErrors,       |         |
        is_integer(Int)                    |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test34([any()]) -> [true].           |         |
test34(L) ->                               | OK      |
    [X || X <- L, X].                      |         |
                                           |         |
-spec test35([any()]) -> [true].           |         |
test35(L) ->                               | OK      |
    Res = [X || X <- L, X],                |         |
    Res.                                   |         |
                                           |         |
-spec test36_neg([any()]) -> [false].      |         |
test36_neg(L) ->                           | ERROR   |
    [X || X <- L, X].                      |         | [ || ].
                                           |         | Expected: ['false']
                                           |         | Got     : ['true']
                                           |         | 
                                           |         |   ['true'] is not a subtype of ['false']
                                           |         |   because
                                           |         |   'true' is not a subtype of 'false'
                                           |         |
-spec test37_neg([any()]) -> [false].      |         |
test37_neg(L) ->                           | ERROR   |
    Res = [X || X <- L, X],                |         |
    Res.                                   |         | Res.
                                           |         | Expected: ['false']
                                           |         | Got     : ['true']
                                           |         | 
                                           |         |   ['true'] is not a subtype of ['false']
                                           |         |   because
                                           |         |   'true' is not a subtype of 'false'
                                           |         |
-spec test38(binary()) -> [].              |         |
test38(B) ->                               | OK      |
    [Y || <<Y>> <= B, Y ].                 |         |
                                           |         |
-spec test39_neg(binary()) -> [atom()].    |         |
test39_neg(B) ->                           | ERROR   |
    [Y || <<Y>> <= B, is_integer(Y) ].     |         | [ || ].
                                           |         | Expected: [atom()]
                                           |         | Got     : [number()]
                                           |         | 
                                           |         |   [number()] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   number() is not a subtype of atom()
                                           |         |
-record(rec1, {                            |         |
    b :: undefined | binary(),             |         |
    s :: undefined | string()              |         |
}).                                        |         |
                                           |         |
-record(rec2, {                            |         |
    b :: undefined | binary(),             |         |
    s :: undefined | string()              |         |
}).                                        |         |
                                           |         |
-spec gen1() -> [binary() | undefined].    |         |
gen1() ->                                  | OK      |
    error(undefined).                      |         |
                                           |         |
-spec gen2() -> [#rec1{} | #rec2{}].       |         |
gen2() ->                                  | OK      |
    error(undefined).                      |         |
                                           |         |
-spec gen3() -> [#rec1{} | #rec2{} | binar……         |
gen3() ->                                  | OK      |
    error(undefined).                      |         |
                                           |         |
-spec test40_neg() ->                      |         |
    [binary()].                            |         |
test40_neg() ->                            | ERROR   |
    Res = [X || X <- gen1()],              |         |
    Res.                                   |         | Res.
                                           |         | Expected: [binary()]
                                           |         | Got     : [binary() | 'undefined']
                                           |         | 
                                           |         |   [binary() | 'undefined'] is not a subtype of [binary()]
                                           |         |   because
                                           |         |   binary() | 'undefined' is not a subtype of binary()
                                           |         |   because
                                           |         |   'undefined' is not a subtype of binary()
                                           |         |
-spec test41() -> [binary()].              |         |
test41() ->                                | OK      |
    Res = [X || X <- gen1(), is_binary(X)]……         |
    Res.                                   |         |
                                           |         |
-spec test42() -> [undefined].             |         |
test42() ->                                | OK      |
    Res = [                                |         |
        X || X <- gen1(),                  |         |
        X =:= undefined                    |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test43() -> [undefined].             |         |
test43() ->                                | OK      |
    Res = [                                |         |
        X || X <- gen1(),                  |         |
        X == undefined                     |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test44() -> [binary()].              |         |
test44() ->                                | OK      |
    Res = [                                |         |
        X || X <- gen1(),                  |         |
        X =/= undefined                    |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test45() -> [binary()].              |         |
test45() ->                                | OK      |
    Res = [                                |         |
        X || X <- gen1(),                  |         |
        X /= undefined                     |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test46() -> [#rec1{}].               |         |
test46() ->                                | OK      |
    Res = [                                |         |
        Rec || Rec <- gen2(),              |         |
        is_record(Rec, rec1)               |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test47() -> [#rec1{}].               |         |
test47() ->                                | OK      |
    Res = [                                |         |
        Rec || Rec <- gen2(),              |         |
        is_record(Rec, rec1, 2)            |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test48() -> [#rec1{} | #rec2{}].     |         |
test48() ->                                | ERROR   |
    Res = [                                |         |
        Rec || Rec <- gen3(),              |         |
        is_record(Rec, rec1) or            |         |
            is_record(Rec, rec2)           |         |
    ],                                     |         |
    Res.                                   |         | Res.
                                           |         | Expected: [#rec1{} | #rec2{}]
                                           |         | Got     : [#rec1{} | #rec2{} | binary()]
                                           |         | 
                                           |         |   [#rec1{} | #rec2{} | binary()] is not a subtype of [#rec1{} | #rec2{}]
                                           |         |   because
                                           |         |   #rec1{} | #rec2{} | binary() is not a subtype of #rec1{} | #rec2{}
                                           |         |   because
                                           |         |   binary() is not a subtype of #rec1{} | #rec2{}
                                           |         |   because
                                           |         |   binary() is not a subtype of #rec1{}
                                           |         |
-spec modules1                             |         |
    (unicode:chardata())                   |         |
        -> [module()].                     |         |
modules1(P) ->                             | OK      |
    AllModules = [                         |         |
        list_to_atom(M)                    |         |
        || {M, F, _}                       |         |
            <- code:all_available(),       |         |
        is_list(F),                        |         |
        string:prefix(F, P) =/= nomatch    |         |
    ],                                     |         |
    AllModules.                            |         |
                                           |         |
-spec modules2                             |         |
    (unicode:chardata())                   |         |
        -> [module()].                     |         |
modules2(P) ->                             | OK      |
    AllModules = [                         |         |
        list_to_atom(M)                    |         |
        || {M, F, _}                       |         |
            <- code:all_available(),       |         |
        F =/= preloaded,                   |         |
        F =/= cover_compiled,              |         |
        string:prefix(F, P) =/= nomatch    |         |
    ],                                     |         |
    AllModules.                            |         |
                                           |         |
-spec test49([                             |         |
    fun(() -> atom()) |                    |         |
    fun((number()) -> atom())              |         |
]) -> [atom()].                            |         |
test49(Fs) ->                              | OK      |
    Res = [                                |         |
        F(0) || F <- Fs,                   |         |
        is_function(F, 1)                  |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test50([                             |         |
    fun(() -> atom()) |                    |         |
    fun((number()) -> atom())              |         |
]) -> [atom()].                            |         |
test50(Fs) ->                              | OK      |
    Res = [                                |         |
        F() || F <- Fs,                    |         |
        is_function(F, 0)                  |         |
    ],                                     |         |
    Res.                                   |         |
                                           |         |
-spec test51_neg([                         |         |
    fun(() -> atom()) |                    |         |
    fun((number()) -> atom())              |         |
]) -> [atom()].                            |         |
test51_neg(Fs) ->                          | ERROR   |
    Res = [                                |         |
        F() || F <- Fs,                    |         | F.
                                           |         | Expected fun type with arity 0
                                           |         | Got: fun(() -> atom()) | fun((number()) -> atom())
        is_function(F)                     |         |
    ],                                     |         |
    Res.                                   |         |
