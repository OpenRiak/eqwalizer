%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(binaries).                         |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec test01_pos() -> binary().            |         |
test01_pos() ->                            | OK      |
    <<>>.                                  |         |
                                           |         |
-spec test02_pos(binary())                 |         |
    -> {number(), binary()}.               |         |
test02_pos(<<X, Y/binary>>) -> {X, Y}.     | OK      |
                                           |         |
-spec test03_pos(binary())                 |         |
    -> binary().                           |         |
test03_pos(<<N, _:N, Rest/binary>>) ->     | OK      |
    Rest.                                  |         |
                                           |         |
-spec test04_neg() -> list(term()).        |         |
test04_neg() -> <<>>.                      | ERROR   | <<..>>.
                                           |         | Expression has type:   binary()
                                           |         | Context expected type: [term()]
                                           |         |
-spec test05_pos(binary())                 |         |
        -> {binary(), binary()}.           |         |
test05_pos(<<H:42/binary, Rest/binary>>) -…… OK      |
    {H, Rest}.                             |         |
                                           |         |
-spec test05_neg(atom()) -> binary().      |         |
test05_neg(A) -> <<A/signed>>.             | ERROR   | A.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: number()
                                           |         |
-spec test06_neg(atom(), integer()) -> bin……         |
test06_neg(A, S) -> <<A:S>>.               | ERROR   | A.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: number()
                                           |         |
-spec test07_neg(atom()) -> binary().      |         |
test07_neg(A) -> [A].                      | ERROR   | [A].
                                           |         | Expression has type:   [atom()]
                                           |         | Context expected type: binary()
                                           |         |
-spec test08_neg(binary()) -> float().     |         |
test08_neg(<<F/float, _R/binary>>) -> F.   | OK      |
                                           |         |
-spec test09(integer(), integer())         |         |
        -> binary().                       |         |
test09(I1, I2) ->                          | OK      |
    X = <<I1, I2>>,                        |         |
    X.                                     |         |
                                           |         |
-spec string_lit() -> binary().            |         |
string_lit() ->                            | OK      |
    <<"binary">>.                          |         |
                                           |         |
-spec string_lit_neg() -> binary().        |         |
string_lit_neg() ->                        | ERROR   |
    <<"binary"/binary>>.                   |         | string_lit.
                                           |         | Expression has type:   string()
                                           |         | Context expected type: binary()
                                           |         |
-spec special_syntax1() -> <<>>.           |         |
special_syntax1() -> <<>>.                 | OK      |
                                           |         |
-spec special_syntax2() -> <<_:_*8>>.      |         |
special_syntax2() -> <<>>.                 | OK      |
                                           |         |
-spec special_syntax3() -> <<_:8, _:_*8>>. |         |
special_syntax3() -> <<"binary">>.         | OK      |
                                           |         |
-spec convert(binary()) -> number().       |         |
convert(Bits) ->                           | OK      |
    <<X:(bit_size(Bits))>> = Bits,         |         |
    X.                                     |         |
                                           |         |
-spec convert_neg1                         |         |
    (binary(), atom()) -> number().        |         |
convert_neg1(Bits, A) ->                   | ERROR   |
    <<X:A>> = Bits,                        |         | A.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: number()
    X.                                     |         |
                                           |         |
-spec convert_neg2                         |         |
    (binary()) -> number().                |         |
convert_neg2(Bits) ->                      | ERROR   |
    <<X:(self())>> = Bits,                 |         | erlang:self().
                                           |         | Expression has type:   pid()
                                           |         | Context expected type: number()
    X.                                     |         |
                                           |         |
-spec string_lit2() -> binary().           |         |
string_lit2() ->                           | OK      |
    <<"">>.                                |         |
                                           |         |
-spec empty_list_neg() -> binary().        |         |
empty_list_neg() ->                        | ERROR   |
    <<[]>>.                                |         | [].
                                           |         | Expression has type:   []
                                           |         | Context expected type: number()
