%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(elab_clause).                      |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec foo(term()) -> {atom(), atom()}.     |         |
foo(_) -> {any, any}.                      | OK      |
                                           |         |
-spec bar(term()) ->                       |         |
    {atom(), atom()} | {number()}.         |         |
bar(true) -> {any, any};                   | OK      |
bar(_) -> {0}.                             |         |
                                           |         |
-spec app_foo(term()) -> atom().           |         |
app_foo(X) ->                              | OK      |
    Res = case foo(X) of                   |         |
              {Y, _} -> Y                  |         |
          end,                             |         |
    Res.                                   |         |
                                           |         |
-spec app_foo_neg(term()) -> binary().     |         |
app_foo_neg(X) ->                          | ERROR   |
    Res = case foo(X) of                   |         |
              {_, Y} -> Y                  |         |
          end,                             |         |
    Res.                                   |         | Res.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: binary()
                                           |         |
-spec app_bar(term()) ->                   |         |
    {atom()} | number().                   |         |
app_bar(X) ->                              | OK      |
    Res = case bar(X) of                   |         |
              {Y, _} -> {Y};               |         |
              {N} -> N                     |         |
          end,                             |         |
    Res.                                   |         |
                                           |         |
-spec app_bar_neg(term()) ->               |         |
    {atom()} | number().                   |         |
app_bar_neg(X) ->                          | ERROR   |
    Res = case bar(X) of                   |         |
              {Y, _} -> Y;                 |         |
              {N} -> {N}                   |         |
          end,                             |         |
    Res.                                   |         | Res.
                                           |         | Expression has type:   atom() | {number()}
                                           |         | Context expected type: {atom()} | number()
                                           |         |
-spec catch_foo(term()) -> atom().         |         |
catch_foo(X) ->                            | OK      |
    Res =                                  |         |
        try foo(X)                         |         |
        of {Y, _} -> Y                     |         |
        catch                              |         |
            A:_  -> A                      |         |
        end,                               |         |
    Res.                                   |         |
                                           |         |
-spec catch_foo1(term()) -> atom().        |         |
catch_foo1(X) ->                           | OK      |
    try foo(X)                             |         |
    of {Y, _} -> Y                         |         |
    catch                                  |         |
        A:_  -> A                          |         |
    end.                                   |         |
                                           |         |
-spec catch_foo1_neg(term()) -> number().  |         |
catch_foo1_neg(X) ->                       | ERROR   |
    Res =                                  |         |
        try foo(X)                         |         |
        of {_Y, _} -> 1                    |         |
        catch                              |         |
            A:_  -> A                      |         |
        end,                               |         |
    Res.                                   |         | Res.
                                           |         | Expression has type:   'error' | 'exit' | 'throw' | number()
                                           |         | Context expected type: number()
                                           |         | 
                                           |         |   'error' | 'exit' | 'throw' | number() is not compatible with number()
                                           |         |   because
                                           |         |   'error' is not compatible with number()
                                           |         |
-spec catch_foo2_neg(term()) -> number().  |         |
catch_foo2_neg(X) ->                       | ERROR   |
    Res =                                  |         |
        try foo(X)                         |         |
        of {_Y, _} -> 1                    |         |
        catch                              |         |
            _:_:Stack  -> Stack            |         |
        end,                               |         |
    Res.                                   |         | Res.
                                           |         | Expression has type:   number() | [dynamic()]
                                           |         | Context expected type: number()
                                           |         | 
                                           |         |   number() | [dynamic()] is not compatible with number()
                                           |         |   because
                                           |         |   [dynamic()] is not compatible with number()
                                           |         |
-spec catch_foo3_neg(term()) -> number().  |         |
catch_foo3_neg(X) ->                       | ERROR   |
    try foo(X)                             |         |
    of {_Y, _} -> 1                        |         |
    catch                                  |         |
        A:_  -> A                          |         | A.
                                           |         | Expression has type:   'error' | 'exit' | 'throw'
                                           |         | Context expected type: number()
    end.                                   |         |
                                           |         |
-spec catch_foo4_neg(term()) -> number().  |         |
catch_foo4_neg(X) ->                       | ERROR   |
    try foo(X)                             |         |
    of {_Y, _} -> 1                        |         |
    catch                                  |         |
        Class:_:Stack  -> {Class, Stack}   |         | {Class, Stack}.
                                           |         | Expression has type:   {'error' | 'exit' | 'throw', [dynamic()]}
                                           |         | Context expected type: number()
    end.                                   |         |
