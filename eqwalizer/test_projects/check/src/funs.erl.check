%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(funs).                             |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec map_const_pos1()                     |         |
    -> [number()].                         |         |
map_const_pos1() ->                        | OK      |
    lmap(fun (_) -> 3 end, [a, a, a]).     |         |
                                           |         |
-spec map_const_pos2() -> [number()].      |         |
map_const_pos2() ->                        | OK      |
    X =lmap(fun (_) -> 3 end, [a, a, a]),  |         |
    X.                                     |         |
                                           |         |
-spec check_fun_pos() -> fun().            |         |
check_fun_pos() -> fun() -> ok end.        | OK      |
                                           |         |
-spec check_fun_neg() -> pid().            |         |
check_fun_neg() -> fun() -> ok end.        | ERROR   | fun.
                                           |         | Expression has type:   fun(() -> 'ok')
                                           |         | Context expected type: pid()
                                           |         |
-spec body_is_not_checked() -> fun().      |         |
body_is_not_checked() ->                   | ERROR   |
    Tup = {},                              |         |
    fun() -> list_to_atom(Tup) end.        |         | Tup.
                                           |         | Expression has type:   {}
                                           |         | Context expected type: string()
                                           |         |
-spec test_id() -> number().               |         |
test_id() ->                               | OK      |
    (fun(X) -> X end)(2).                  |         |
                                           |         |
-spec test_const() -> number().            |         |
test_const() ->                            | OK      |
    X = (fun() -> 2 end)(),                |         |
    X.                                     |         |
                                           |         |
% we won't do anything interesting here    |         |
% until much later                         |         |
-spec check_fun_specific1() ->             |         |
    fun((T) -> T).                         |         |
check_fun_specific1() ->                   | OK      |
    fun(T) -> T end.                       |         |
                                           |         |
-spec check_fun_specific2() ->             |         |
    fun(({T}) -> T).                       |         |
check_fun_specific2() ->                   | OK      |
    fun({T}) -> T end.                     |         |
                                           |         |
-type n() :: number().                     |         |
                                           |         |
-spec lam_arg_1_pos() -> [n()].            |         |
lam_arg_1_pos() ->                         | OK      |
    lmap_n_to_n(                           |         |
        fun(X) -> X * 2 end,               |         |
        [1,2,3]                            |         |
    ).                                     |         |
                                           |         |
-spec lam_arg_2_neg() -> [n()].            |         |
lam_arg_2_neg() ->                         | ERROR   |
    lmap_n_to_n(fun(X) ->                  |         |
        X ++ [] end,                       |         | X.
                                           |         | Expression has type:   n()
                                           |         | Context expected type: [term()]
                                           |         | 
                                           |         |   n() is not compatible with [term()]
                                           |         |   because
                                           |         |   number() is not compatible with [term()]
        [1,2,3]                            |         |
    ).                                     |         |
                                           |         |
-spec lam_arg_3_neg() -> [n()].            |         |
lam_arg_3_neg() ->                         | ERROR   |
    lmap_n_to_n(fun(X) ->                  |         |
            erlang:atom_to_binary(X)       |         | X.
                                           |         | Expression has type:   n()
                                           |         | Context expected type: atom()
                                           |         | 
                                           |         |   n() is not compatible with atom()
                                           |         |   because
                                           |         |   number() is not compatible with atom()
            end,                           |         |
        [1,2,3]                            |         |
    ).                                     |         |
                                           |         |
-spec lam_arg_4_neg() -> [a].              |         |
lam_arg_4_neg() ->                         | ERROR   |
    lmap_n_to_n(                           |         | lmap_n_to_n(fun, [1, 2, 3]).
                                           |         | Expression has type:   [n()]
                                           |         | Context expected type: ['a']
                                           |         | 
                                           |         |   [n()] is not compatible with ['a']
                                           |         |   because
                                           |         |   n() is not compatible with 'a'
                                           |         |   because
                                           |         |   number() is not compatible with 'a'
        fun(X) -> X end,                   |         |
        [1,2,3]                            |         |
    ).                                     |         |
                                           |         |
-spec lam_ret_1_pos() ->                   |         |
    fun((n(), n()) -> n()).                |         |
lam_ret_1_pos() ->                         | OK      |
    fun(X, Y) -> X + Y end.                |         |
                                           |         |
-spec lam_ret_1_neg() ->                   |         |
    fun((n(), n()) -> n()).                |         |
lam_ret_1_neg() ->                         | ERROR   |
    fun(X, Y) -> X ++ Y end.               |         | X.
                                           |         | Expression has type:   n()
                                           |         | Context expected type: [term()]
                                           |         | 
                                           |         |   n() is not compatible with [term()]
                                           |         |   because
                                           |         |   number() is not compatible with [term()]
                                           |         |
-spec lam_ret_2_neg() ->                   |         |
    fun((n(), n()) -> n()).                |         |
lam_ret_2_neg() ->                         | ERROR   |
    fun(X, Y) ->                           |         |
        erlang:atom_to_binary(X),          |         | X.
                                           |         | Expression has type:   n()
                                           |         | Context expected type: atom()
                                           |         | 
                                           |         |   n() is not compatible with atom()
                                           |         |   because
                                           |         |   number() is not compatible with atom()
        X ++ Y                             |         |
    end.                                   |         |
                                           |         |
-spec lam_ret_3_neg() ->                   |         |
    fun((n(), n()) -> n()).                |         |
lam_ret_3_neg() ->                         | ERROR   |
    fun(X, _) ->                           |         |
      erlang:is_number(X)                  |         | erlang:is_number(X).
                                           |         | Expression has type:   boolean()
                                           |         | Context expected type: n()
    end.                                   |         |
                                           |         |
-spec map_lam_ab() -> [a].                 |         |
map_lam_ab() ->                            | OK      |
    lmap(fun (X) -> X end, [a, a, a]).     |         |
                                           |         |
-spec map_lam_aa() -> [a].                 |         |
map_lam_aa() ->                            | OK      |
    lmap_aa(fun (X) -> X end, [a, a, a]).  |         |
                                           |         |
-spec map_lam_a_num() -> [n()].            |         |
map_lam_a_num() ->                         | OK      |
    lmap_a_num(                            |         |
        fun (_) ->                         |         |
            3 end,                         |         |
        [a, a, a]                          |         |
    ).                                     |         |
                                           |         |
-spec map_lam_bad_arity()                  |         |
    -> [n()].                              |         |
map_lam_bad_arity() ->                     | ERROR   |
    lmap_n_to_n(                           |         |
        fun (X, _) -> X end,               |         | fun.
                                           |         | fun with arity 2 used as fun with 1 arguments
        [3]                                |         |
    ).                                     |         |
                                           |         |
-spec x4([n()], atom()) -> [n()].          |         |
x4(L, N) ->                                | ERROR   |
    nmap(                                  |         |
        fun (Y) -> Y + N end,              |         | N.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: number()
        L                                  |         |
    ).                                     |         |
                                           |         |
-spec x5([[n()]], n()) -> [[n()]].         |         |
x5(L, N) ->                                | OK      |
    lmap(                                  |         |
        fun (Ns) ->                        |         |
            nmap(                          |         |
                fun (Y) -> Y + N end,      |         |
                Ns)                        |         |
        end,                               |         |
        L                                  |         |
    ).                                     |         |
                                           |         |
-spec xmap(                                |         |
    fun((A) -> none()),                    |         |
    [A]) -> [none()].                      |         |
xmap(F, XS) -> [F(X) || X <- XS].          | OK      |
                                           |         |
-spec x6([none()], none()) -> [none()].    |         |
x6(L, B) ->                                | OK      |
    xmap(fun (_) -> B end, L).             |         |
                                           |         |
% helpers                                  |         |
                                           |         |
-spec lmap_n_to_n(                         |         |
    fun((n()) -> n()), [n()]) -> [n()].    |         |
lmap_n_to_n(F, Xs) -> lmap(F, Xs).         | OK      |
                                           |         |
 -spec lmap(fun((A) -> B), [A]) -> [B].    |         |
 lmap(_F, _XS) -> [].                      | OK      |
                                           |         |
 -spec lmap_aa(fun((A) -> A), [A]) -> [A]. |         |
 lmap_aa(_F, _XS) -> [].                   | OK      |
                                           |         |
-spec lmap_a_num(                          |         |
    fun((A) -> n()), [A]) -> [n()].        |         |
lmap_a_num(_F, _XS) -> [].                 | OK      |
                                           |         |
-spec nmap(                                |         |
    fun((n()) -> n()),                     |         |
    [n()]) -> [n()].                       |         |
nmap(F, XS) -> [F(X) || X <- XS].          | OK      |
                                           |         |
-spec test_dynamic() -> number().          |         |
test_dynamic() ->                          | OK      |
    Res = (fun(X) -> X end)(2),            |         |
    Res.                                   |         |
                                           |         |
-spec test_dynamic2() -> a | b.            |         |
test_dynamic2() ->                         | OK      |
    Res = (                                |         |
        fun                                |         |
            (a) -> a;                      |         |
            (b) -> b end                   |         |
    )(a),                                  |         |
    Res.                                   |         |
                                           |         |
-spec test_arity_1() -> ok.                |         |
test_arity_1() ->                          | ERROR   |
    (fun () -> ok end)(1, 2, 3).           |         | fun.
                                           |         | fun with arity 0 used as fun with 3 arguments
                                           |         |
-spec test_arity_2() -> ok.                |         |
test_arity_2() ->                          | ERROR   |
    (fun (_X) -> ok end)(1, 2, 3).         |         | fun.
                                           |         | fun with arity 1 used as fun with 3 arguments
                                           |         |
-spec test_arity_3() -> ok.                |         |
test_arity_3() ->                          | ERROR   |
    (fun (_X) -> ok end)().                |         | fun.
                                           |         | fun with arity 1 used as fun with 0 arguments
                                           |         |
% function() is a system alias to fun()    |         |
-spec fun_id(function()) -> fun().         |         |
fun_id(F) -> F.                            | OK      |
                                           |         |
-spec named_1() ->                         |         |
    fun((string()) -> atom()).             |         |
named_1() ->                               | OK      |
    fun _Lta(X) -> list_to_atom(X) end.    |         |
                                           |         |
-spec named_2() -> [number()].             |         |
named_2() ->                               | OK      |
    Res = lists:map(                       |         |
        fun _Map(X) -> X + 1 end,          |         |
        [1, 2, 3]                          |         |
    ),                                     |         |
    Res.                                   |         |
                                           |         |
-spec named_3() -> fun(() -> a).           |         |
named_3() ->                               | ERROR   |
    fun F() -> F end.                      |         | F.
                                           |         | Expression has type:   fun(() -> 'a')
                                           |         | Context expected type: 'a'
                                           |         |
-spec named_4() -> nok.                    |         |
named_4() ->                               | ERROR   |
    lists:map(                             |         |
        fun Fib(N) when N < 2 -> 1;        |         |
            Fib(N) ->                      |         |
                Fib(N - 2) + Fib(N - 1)    |         | _ - _.
                                           |         | Expression has type:   number()
                                           |         | Context expected type: none()
        end,                               |         |
        [1, 2, 3]                          |         |
    ),                                     |         |
    nok.                                   |         |
                                           |         |
% Sound but not complete named fun logic:  |         |
% The pattern `F = 1 can never match,      |         |
% so `F` should be of type `none()`        |         |
% but we treat it as `number()`            |         |
-spec named_match() -> whatevs.            |         |
named_match() ->                           | ERROR   |
    (fun F() -> F = 1, F end)().           |         | F.
                                           |         | Expression has type:   number()
                                           |         | Context expected type: 'whatevs'
                                           |         |
% Understanding auto-import funs           |         |
-spec atoms_to_binaries(                   |         |
    [atom()]                               |         |
) -> [binary()].                           |         |
atoms_to_binaries(As) ->                   | OK      |
    lists:map(fun atom_to_binary/1, As).   |         |
                                           |         |
-type int_result() :: fun(() ->            |         |
    {ok, integer()} | error).              |         |
                                           |         |
-spec ints([int_result()]) ->              |         |
    [integer()].                           |         |
ints([]) -> [];                            | OK      |
ints([F | Fs]) ->                          |         |
    case F() of                            |         |
        {ok, I} -> [I | ints(Fs)];         |         |
        error -> ints(Fs)                  |         |
    end.                                   |         |
                                           |         |
-spec lambda_app() -> number().            |         |
lambda_app() ->                            | ERROR   |
    Res = (fun                             |         |
        Fib(N) when N < 2 ->               |         |
            1;                             |         |
        Fib(N) ->                          |         |
            Fib(N - 2) + Fib(N - 1)        |         | Unbound var: Fib

    end)(4),                               |         |
    Res.                                   |         |
                                           |         |
-type getter(A) :: fun((atom()) -> A).     |         |
                                           |         |
-spec getter1                              |         |
    (getter(A)) -> getter(A).              |         |
getter1(F) ->                              | OK      |
    fun(A) ->                              |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter2                              |         |
    (fun((atom()) -> A)) -> fun((atom()) -……         |
getter2(F) ->                              | OK      |
    fun(A) ->                              |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter3                              |         |
    (fun((atom()) -> A)) -> ((fun((atom())……         |
getter3(F) ->                              | OK      |
    fun(A) ->                              |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter4_neg                          |         |
    (fun((atom()) -> A)) -> ((fun((atom())……         |
getter4_neg(F) ->                          | ERROR   |
    fun(A) ->                              |         | fun.
                                           |         | Expression has type:   fun((none()) -> term())
                                           |         | Context expected type: fun((atom()) -> A) | fun((term()) -> 'ok')
                                           |         | 
                                           |         |   fun((none()) -> term()) is not compatible with fun((atom()) -> A) | fun((term()) -> 'ok')
                                           |         |   because
                                           |         |   fun((none()) -> term()) is not compatible with fun((atom()) -> A)
                                           |         |   because
                                           |         |   term() is not compatible with A
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter5_neg                          |         |
    (fun((atom()) -> A)) -> ((fun ((term()……         |
getter5_neg(F) ->                          | ERROR   |
    fun(A) ->                              |         | fun.
                                           |         | Expression has type:   fun((none()) -> term())
                                           |         | Context expected type: fun((term()) -> 'ok') | fun((atom()) -> A)
                                           |         | 
                                           |         |   fun((none()) -> term()) is not compatible with fun((term()) -> 'ok') | fun((atom()) -> A)
                                           |         |   because
                                           |         |   fun((none()) -> term()) is not compatible with fun((term()) -> 'ok')
                                           |         |   because
                                           |         |   term() is not compatible with 'ok'
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter6_neg                          |         |
    (fun((atom()) -> _)) -> ((fun()) | (fu……         |
getter6_neg(F) ->                          | ERROR   |
    fun(A) ->                              |         | fun.
                                           |         | Expression has type:   fun((none()) -> term())
                                           |         | Context expected type: fun() | fun((term()) -> 'ok')
                                           |         | 
                                           |         |   fun((none()) -> term()) is not compatible with fun() | fun((term()) -> 'ok')
                                           |         |   because
                                           |         |   fun((none()) -> term()) is not compatible with fun()
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter7                              |         |
    (fun((atom()) -> A)) -> ok | (fun ((at……         |
getter7(F) ->                              | OK      |
    fun(A) ->                              |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-spec getter8_neg                          |         |
    (fun((atom()) -> _)) -> ok | getter(ot……         |
getter8_neg(F) ->                          | ERROR   |
    fun(A) ->                              |         |
        F(A)                               |         | F(A).
                                           |         | Expression has type:   term()
                                           |         | Context expected type: 'other'
    end.                                   |         |
                                           |         |
-spec getter9_neg                          |         |
    (fun((atom()) -> A)) -> a | ((fun ((te……         |
getter9_neg(F) ->                          | ERROR   |
    fun(A) ->                              |         |
        F(A)                               |         | A.
                                           |         | Expression has type:   term()
                                           |         | Context expected type: atom()
    end.                                   |         |
                                           |         |
-spec getter10                             |         |
    (fun((atom()) -> A)) -> a | ((fun ((te……         |
getter10(F) ->                             | OK      |
    fun(A) ->                              |         |
        F(A)                               |         |
    end.                                   |         |
                                           |         |
-type stream(A) :: eos | {head, A}.        |         |
                                           |         |
-spec id_predicate(fun((stream(A)) -> ok))……         |
id_predicate(P) -> P.                      | OK      |
                                           |         |
-spec wrap_id(fun((stream(A)) -> ok)) -> (……         |
wrap_id(P) -> id_predicate(P).             | OK      |
                                           |         |
-spec hd_invariant([fun((A) -> A)]) -> (fu……         |
hd_invariant([F | _]) -> F.                | OK      |
                                           |         |
-spec test_invariant() -> (fun((atom()) ->……         |
test_invariant() -> hd_invariant([]).      | ERROR   | hd_invariant([]).
                                           |         | Expression has type:   fun((none()) -> none())
                                           |         | Context expected type: fun((atom()) -> atom())
                                           |         | 
                                           |         |   fun((none()) -> none()) is not compatible with fun((atom()) -> atom())
                                           |         |   because
                                           |         |   atom() is not compatible with none()
