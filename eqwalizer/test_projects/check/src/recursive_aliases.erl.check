%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(recursive_aliases).                |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
-export_type([                             |         |
    x_cycle/0,                             |         |
    opaque_id/1,                           |         |
    foo4/1,                                |         |
    foo5/1,                                |         |
    foo6/1,                                |         |
    pchainB/1,                             |         |
    foo7_neg/1,                            |         |
    bar1/1,                                |         |
    bar2/1,                                |         |
    bar3/1,                                |         |
    test1/0,                               |         |
    test2/2,                               |         |
    test3/2,                               |         |
    test4/0                                |         |
]).                                        |         |
                                           |         |
-type chainA()                             |         |
    :: nil                                 |         |
     | {a, chainA()}.                      |         |
                                           |         |
-type chainB()                             |         |
    :: nil                                 |         |
     | {b, chainB()}.                      |         |
                                           |         |
-type chainAB()                            |         |
    :: nil                                 |         |
     | {a, chainAB()}                      |         |
     | {b, chainAB()}.                     |         |
                                           |         |
-type pchainA(Elem)                        |         |
    :: nil                                 |         |
     | {a, Elem, pchainA(Elem)}.           |         |
                                           |         |
-type pchainB(Elem)                        |         |
    :: nil                                 |         |
     | {b, Elem, pchainB(Elem)}.           |         |
                                           |         |
-type pchainAB(Elem)                       |         |
    :: nil                                 |         |
     | {a, pchainAB(Elem)}                 |         |
     | {b, pchainAB(Elem)}.                |         |
                                           |         |
-spec subtype1(chainA()) -> chainAB().     |         |
subtype1(C) -> C.                          | OK      |
                                           |         |
-spec subtype2(chainB()) -> chainAB().     |         |
subtype2(C) -> C.                          | OK      |
                                           |         |
-spec subtype3_neg(chainA()) -> chainB().  |         |
subtype3_neg(C) -> C.                      | ERROR   | C.
                                           |         | Expression has type:   chainA()
                                           |         | Context expected type: chainB()
                                           |         | 
                                           |         |   chainA() is not compatible with chainB()
                                           |         |   because
                                           |         |   'nil' | {'a', chainA()} is not compatible with chainB()
                                           |         |   because
                                           |         |   'nil' | {'a', chainA()} is not compatible with 'nil' | {'b', chainB()}
                                           |         |   because
                                           |         |   {'a', chainA()} is not compatible with 'nil' | {'b', chainB()}
                                           |         |
-spec subtype4_neg(chainB()) -> chainA().  |         |
subtype4_neg(C) -> C.                      | ERROR   | C.
                                           |         | Expression has type:   chainB()
                                           |         | Context expected type: chainA()
                                           |         | 
                                           |         |   chainB() is not compatible with chainA()
                                           |         |   because
                                           |         |   'nil' | {'b', chainB()} is not compatible with chainA()
                                           |         |   because
                                           |         |   'nil' | {'b', chainB()} is not compatible with 'nil' | {'a', chainA()}
                                           |         |   because
                                           |         |   {'b', chainB()} is not compatible with 'nil' | {'a', chainA()}
                                           |         |
-spec subtype5_neg(chainAB()) -> chainA(). |         |
subtype5_neg(C) -> C.                      | ERROR   | C.
                                           |         | Expression has type:   chainAB()
                                           |         | Context expected type: chainA()
                                           |         | 
                                           |         |   chainAB() is not compatible with chainA()
                                           |         |   because
                                           |         |   'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with chainA()
                                           |         |   because
                                           |         |   'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with 'nil' | {'a', chainA()}
                                           |         |   because
                                           |         |   {'b', chainAB()} is not compatible with 'nil' | {'a', chainA()}
                                           |         |
-spec subtype6_neg(chainAB()) -> chainB(). |         |
subtype6_neg(C) -> C.                      | ERROR   | C.
                                           |         | Expression has type:   chainAB()
                                           |         | Context expected type: chainB()
                                           |         | 
                                           |         |   chainAB() is not compatible with chainB()
                                           |         |   because
                                           |         |   'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with chainB()
                                           |         |   because
                                           |         |   'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with 'nil' | {'b', chainB()}
                                           |         |   because
                                           |         |   {'a', chainAB()} is not compatible with 'nil' | {'b', chainB()}
                                           |         |
-type non_prod() :: non_prod().            | INVALID | recursive type non_prod/0 is not productive

                                           |         |
-spec non_prod_id(non_prod()) ->           | INVALID | non_prod_id/1 references type with invalid definition: non_prod/0

    non_prod() | number().                 |         |
non_prod_id(N) -> N.                       |         |
                                           |         |
                                           |         |
                                           |         |
-spec subtype_p1_neg(                      |         |
    pchainA(atom())                        |         |
) -> pchainAB(atom()).                     |         |
subtype_p1_neg(C) -> C.                    | ERROR   | C.
                                           |         | Expression has type:   pchainA(atom())
                                           |         | Context expected type: pchainAB(atom())
                                           |         | 
                                           |         |   pchainA(atom()) is not compatible with pchainAB(atom())
                                           |         |   because
                                           |         |   'nil' | {'a', atom(), pchainA(atom())} is not compatible with pchainAB(atom())
                                           |         |   because
                                           |         |   'nil' | {'a', atom(), pchainA(atom())} is not compatible with 'nil' | {'a', pchainAB(atom())} | {'b', pchainAB(atom())}
                                           |         |   because
                                           |         |   {'a', atom(), pchainA(atom())} is not compatible with 'nil' | {'a', pchainAB(atom())} | {'b', pchainAB(atom())}
                                           |         |   expected union does not contain any tuple type of size 3
                                           |         |
%%                                         |         |
                                           |         |
-type mChainA()                            |         |
    :: nil                                 |         |
     | #{a := mChainA()}.                  |         |
                                           |         |
-type mChainB()                            |         |
    :: nil                                 |         |
     | #{b := mChainB()}.                  |         |
                                           |         |
-type mChainAB()                           |         |
    :: nil                                 |         |
     | #{a := mChainAB()}                  |         |
     | #{b := mChainAB()}.                 |         |
                                           |         |
-spec m_subtype1(mChainA()) -> mChainAB(). |         |
m_subtype1(C) -> C.                        | OK      |
                                           |         |
-spec m_chainA_size(mChainA()) ->          |         |
    number().                              |         |
m_chainA_size(nil) ->                      | OK      |
    1;                                     |         |
m_chainA_size(#{a := Chain}) ->            |         |
    1 + m_chainA_size(Chain).              |         |
                                           |         |
-spec m_chainB_size_neg(mChainB()) ->      |         |
    number().                              |         |
m_chainB_size_neg(nil) ->                  | ERROR   |
    1;                                     |         |
m_chainB_size_neg(#{b := Chain}) ->        |         |
    1 + m_chainA_size(Chain).              |         | Chain.
                                           |         | Expression has type:   mChainB()
                                           |         | Context expected type: mChainA()
                                           |         | 
                                           |         |   mChainB() is not compatible with mChainA()
                                           |         |   because
                                           |         |   'nil' | #S{b := mChainB()} is not compatible with mChainA()
                                           |         |   because
                                           |         |   'nil' | #S{b := mChainB()} is not compatible with 'nil' | #S{a := mChainA()}
                                           |         |   because
                                           |         |   #S{b := mChainB()} is not compatible with 'nil' | #S{a := mChainA()}
                                           |         |
-type fan() :: nil | #{pid() => fan()}.    |         |
                                           |         |
-spec fan_flatten(fan()) ->                |         |
    [fan()].                               |         |
fan_flatten(nil) ->                        | OK      |
    [nil];                                 |         |
fan_flatten(M) when is_map(M) ->           |         |
    maps:values(M).                        |         |
                                           |         |
-spec fan_x(fan(), term()) ->              |         |
    {pid(), fan()}.                        |         |
fan_x(Fan, Pid) ->                         | OK      |
    case Fan of                            |         |
        #{Pid := Fan1} -> {Pid, Fan1};     |         |
        nil -> {self(), nil}               |         |
    end.                                   |         |
                                           |         |
-spec fan_y(fan()) ->                      |         |
    #{atom() | pid() => fan() | number()}. |         |
fan_y(M) when is_map(M) -> M#{a => 1}.     | OK      |
                                           |         |
-spec fun_fan(fan()) ->                    |         |
    atom().                                |         |
fun_fan(F) -> F().                         | ERROR   | F.
                                           |         | Expected fun type with arity 0
                                           |         | Got: fan()
                                           |         |
%%%%                                       |         |
                                           |         |
-type xChainAB() :: #{                     |         |
    a := xChainAB(),                       |         |
    b => xChainAB()                        |         |
}.                                         |         |
-spec x_foo(atom(), xChainAB()) ->         |         |
    xChainAB().                            |         |
x_foo(A, C) ->                             | OK      |
    case C of                              |         |
        #{A := C1} -> C1                   |         |
    end.                                   |         |
                                           |         |
-spec y_foo(xChainAB()) ->                 |         |
    #{a := number(), b => xChainAB()}.     |         |
y_foo(C) ->                                | OK      |
    C#{a => 1}.                            |         |
                                           |         |
-spec z_foo_1(xChainAB()) ->               |         |
    #{a := number(), b => xChainAB()}.     |         |
z_foo_1(C) ->                              | OK      |
    C#{a := 1}.                            |         |
                                           |         |
-spec z_foo_2_neg(xChainAB()) ->           |         |
    #{a := xChainAB(), b := atom()}.       |         |
z_foo_2_neg(C) ->                          | OK      |
    C#{b := ok}.                           |         |
                                           |         |
%%                                         |         |
                                           |         |
-type my_tree() ::                         |         |
    n | [my_tree()].                       |         |
-spec left_tree(my_tree()) ->              |         |
    my_tree().                             |         |
left_tree(n) ->                            | OK      |
    n;                                     |         |
left_tree([H | _]) ->                      |         |
    left_tree(H).                          |         |
                                           |         |
-spec subtype_5_pos(                       |         |
    pchainA(a)                             |         |
) -> pchainA(a | b).                       |         |
subtype_5_pos(C) -> C.                     | OK      |
                                           |         |
-spec subtype_6_neg(                       |         |
    pchainA(a)                             |         |
) -> pchainA(b | c).                       |         |
subtype_6_neg(C) -> C.                     | ERROR   | C.
                                           |         | Expression has type:   pchainA('a')
                                           |         | Context expected type: pchainA('b' | 'c')
                                           |         | 
                                           |         |   pchainA('a') is not compatible with pchainA('b' | 'c')
                                           |         |   because
                                           |         |   'nil' | {'a', 'a', pchainA('a')} is not compatible with pchainA('b' | 'c')
                                           |         |   because
                                           |         |   'nil' | {'a', 'a', pchainA('a')} is not compatible with 'nil' | {'a', 'b' | 'c', pchainA('b' | 'c')}
                                           |         |   because
                                           |         |   {'a', 'a', pchainA('a')} is not compatible with 'nil' | {'a', 'b' | 'c', pchainA('b' | 'c')}
                                           |         |
-spec un_pchain(pchainA(T)) -> [T].        |         |
un_pchain({a, Elem, Chain}) ->             | OK      |
  [Elem|un_pchain(Chain)];                 |         |
un_pchain(nil) -> [].                      |         |
                                           |         |
-spec use_un_pchain_1(pchainA(T)) -> [T].  |         |
use_un_pchain_1(X) ->                      | OK      |
  un_pchain(X).                            |         |
                                           |         |
-spec use_un_pchain_2(pchainA(a)) -> [a].  |         |
use_un_pchain_2(X) ->                      | OK      |
  un_pchain(X).                            |         |
                                           |         |
-type mu_bad() :: mu_bad() | {a}.          | INVALID | recursive type mu_bad/0 is not productive

                                           |         |
-spec to_mu_bad_neg() ->                   | INVALID | to_mu_bad_neg/0 references type with invalid definition: mu_bad/0

  mu_bad().                                |         |
to_mu_bad_neg() -> {a}.                    |         |
                                           |         |
-spec test_mu_bad_neg(mu_bad()) ->         | INVALID | test_mu_bad_neg/1 references type with invalid definition: mu_bad/0

  pid().                                   |         |
test_mu_bad_neg({X}) -> X.                 |         |
                                           |         |
-type mu(A) :: {mu, mu(mu(A))}.            | INVALID | recursive type mu/1 is not productive

                                           |         |
-spec test2_neg(mu(A)) -> mu(mu(A)).       | INVALID | test2_neg/1 references type with invalid definition: mu/1

test2_neg(M) -> M.                         |         |
                                           |         |
-type mu2() :: {mu, atom() | mu2()}.       |         |
                                           |         |
-spec test3() -> mu2().                    |         |
test3() -> {mu, a}.                        | OK      |
                                           |         |
-spec test4_neg(mu2()) -> pid().           |         |
test4_neg({mu, M}) -> M.                   | ERROR   | M.
                                           |         | Expression has type:   atom() | mu2()
                                           |         | Context expected type: pid()
                                           |         |
% xml types adapted from wa_types          |         |
-type xmlattr()  :: {string(), string()}.  |         |
-type xmlattrs() :: [xmlattr()].           |         |
                                           |         |
-record(el, {                              |         |
  name       :: string(),                  |         |
  attrs = [] :: xmlattrs(),                |         |
  els = []   :: [el()]                     |         |
}).                                        |         |
-type el() :: #el{}.                       |         |
                                           |         |
-spec test_el() -> el().                   |         |
test_el() -> #el{                          | OK      |
  name = "",                               |         |
  attrs = [{"", ""}],                      |         |
  els = [#el{                              |         |
    name = "",                             |         |
    attrs = [{"", ""}],                    |         |
    els = []                               |         |
  }]                                       |         |
}.                                         |         |
                                           |         |
-type xmlstreamelement() :: el()           |         |
  | xmlstreamstart                         |         |
  | xmlstreamend.                          |         |
                                           |         |
-type xmlstreamelements() ::               |         |
  xmlstreamelement()                       |         |
  | [xmlstreamelement()]                   |         |
  | [xmlstreamelements()].                 |         |
                                           |         |
% Adapted from xmlstreamelements/0         |         |
% by inlining an alias                     |         |
-type xmlstreamelements_ok() :: #el{}      |         |
| xmlstreamstart                           |         |
| xmlstreamend                             |         |
| [xmlstreamelement()]                     |         |
| [xmlstreamelements_ok()].                |         |
                                           |         |
-spec test_xmlstreamelements_neg() ->      |         |
  xmlstreamelements().                     |         |
test_xmlstreamelements_neg() ->            | OK      |
  #el{name = ""}.                          |         |
                                           |         |
-spec test_xmlstreamelements_ok() ->       |         |
  xmlstreamelements_ok().                  |         |
test_xmlstreamelements_ok() ->             | OK      |
  #el{name = ""}.                          |         |
                                           |         |
% adapted from OTP's erl_parse.beam,       |         |
% which is generated from erl_parse.yrl    |         |
-type abstract_expr() :: literal |         |         |
  chainA() | af_match(abstract_expr()).    |         |
-type af_match(T) :: {match, T}.           |         |
                                           |         |
% Adapted from abstract_expr/0             |         |
% by inlining an alias                     |         |
-type abstract_expr_ok() :: literal |      |         |
chainA() | {match, (abstract_expr_ok())}.  |         |
                                           |         |
-spec test_af_abstract_expr() ->           |         |
  abstract_expr().                         |         |
test_af_abstract_expr() ->                 | OK      |
  literal.                                 |         |
                                           |         |
-spec test_af_abstract_expr_ok() ->        |         |
  abstract_expr_ok().                      |         |
test_af_abstract_expr_ok() ->              | OK      |
  literal.                                 |         |
                                           |         |
-type id(T) :: T | T.                      |         |
-type mu_bad2() :: id(mu_bad2()).          | INVALID | recursive type mu_bad2/0 is not productive

-type mu_bad2b() :: id(mu_bad2()).         | INVALID | recursive type mu_bad2b/0 is not productive

                                           |         |
-type mu_bad3() :: id(mu_bad3()).          | INVALID | recursive type mu_bad3/0 is not productive

                                           |         |
-spec to_mu_bad3_neg(mu_bad2()) ->         | INVALID | to_mu_bad3_neg/1 references types with invalid definitions: mu_bad3/0, mu_bad2/0

    mu_bad3().                             |         |
to_mu_bad3_neg(X) -> X.                    |         |
                                           |         |
-spec to_mu_bad2b_neg(mu_bad2()) ->        | INVALID | to_mu_bad2b_neg/1 references types with invalid definitions: mu_bad2b/0, mu_bad2/0

  mu_bad2b().                              |         |
to_mu_bad2b_neg(X) -> X.                   |         |
                                           |         |
-type indirect2() :: mutual2().            | INVALID | recursive type indirect2/0 is not productive

-type indirect1() :: mutual1().            | INVALID | recursive type indirect1/0 is not productive

                                           |         |
-type mutual1() :: indirect1()             | INVALID | recursive type mutual1/0 is not productive

  | indirect2().                           |         |
-type mutual2() :: indirect1()             | INVALID | recursive type mutual2/0 is not productive

  | indirect2().                           |         |
                                           |         |
-spec test_mutual_neg(mutual1()) ->        | INVALID | test_mutual_neg/1 references types with invalid definitions: mutual2/0, mutual1/0

    mutual2().                             |         |
test_mutual_neg(X) -> X.                   |         |
                                           |         |
-type mu_tuple(T) :: {T}                   |         |
  | {mu_tuple(ok)}.                        |         |
-type mu4() :: mu_tuple(mu4()) | ok.       |         |
                                           |         |
                                           |         |
                                           |         |
                                           |         |
                                           |         |
                                           |         |
-spec test_mu4() -> mu4().                 |         |
test_mu4() -> ok.                          | OK      |
                                           |         |
-type tuple(T) :: {T}.                     |         |
-type mu5() :: tuple(mu5()) | ok.          |         |
                                           |         |
% similar to mu4() example,                |         |
% except tuple/1 is non-recursive          |         |
-spec test_mu5() -> mu5().                 |         |
test_mu5() -> ok.                          | OK      |
                                           |         |
-opaque opaque_id(T) :: T | T.             |         |
-type mu_bad5() :: opaque_id(mu_bad5()).   | INVALID | recursive type mu_bad5/0 is not productive

-type mu_bad5b() :: opaque_id(mu_bad5()).  | INVALID | recursive type mu_bad5b/0 is not productive

                                           |         |
-spec test_mu_bad5(                        | INVALID | test_mu_bad5/1 references types with invalid definitions: mu_bad5b/0, mu_bad5/0

    mu_bad5()                              |         |
) -> mu_bad5b().                           |         |
test_mu_bad5(X) -> X.                      |         |
                                           |         |
-spec test_non_productive_ty_var_use_neg   |         |
    () -> opaque_id(nok).                  |         |
test_non_productive_ty_var_use_neg() ->    | OK      |
  nok.                                     |         |
                                           |         |
-type my_list(A)                           |         |
:: nil                                     |         |
| {cons, A, my_list(A)}.                   |         |
                                           |         |
-type tree1()                              |         |
    :: {leaf, integer()}                   |         |
     | list(tree1()).                      |         |
                                           |         |
-type tree2()                              |         |
    :: {leaf, integer()}                   |         |
     | my_list(tree2()).                   |         |
                                           |         |
-type tree3(A)                             |         |
    :: {leaf, A}                           |         |
     | {node, list(tree3(A))}.             |         |
                                           |         |
-type tree4(A)                             |         |
    :: {leaf, A}                           |         |
     | {node, my_list(tree4(A))}.          |         |
                                           |         |
 -spec to_tree1() -> tree1().              |         |
to_tree1() ->                              | OK      |
  {leaf, 1}.                               |         |
                                           |         |
-spec to_tree2() -> tree2().               |         |
to_tree2() ->                              | OK      |
  {leaf, 1}.                               |         |
                                           |         |
-spec to_tree3() -> tree3(ok).             |         |
to_tree3() ->                              | OK      |
  {leaf, ok}.                              |         |
                                           |         |
-spec to_tree4() -> tree4(ok).             |         |
to_tree4() ->                              | OK      |
  {leaf, ok}.                              |         |
                                           |         |
-type foo(T) :: T | {foo(T)} | b.          |         |
-type recur() :: foo(recur()) | a.         | INVALID | recursive type recur/0 is not productive

                                           |         |
% should not infinite-loop, see D30103144  |         |
-spec un_recur_neg(recur()) -> ok.         | INVALID | un_recur_neg/1 references type with invalid definition: recur/0

un_recur_neg({X}) ->                       |         |
  un_recur_neg(X).                         |         |
                                           |         |
-spec term_to_recur_neg(term()) ->         | INVALID | term_to_recur_neg/1 references type with invalid definition: recur/0

  recur().                                 |         |
term_to_recur_neg(X) -> X.                 |         |
                                           |         |
-type foo4(T) :: {T, T}.                   |         |
                                           |         |
-type foo5(T) :: {unit, T}.                |         |
                                           |         |
-type foo6(T) :: {T, unit}.                |         |
                                           |         |
-type foo7_neg(T) ::                       | INVALID | recursive type foo7_neg/1 is not productive

  {unit, foo7_neg(foo7_neg(T))}.           |         |
                                           |         |
-type bar1(T) :: {bar2(T), unit}.          |         |
                                           |         |
-type bar2(T) :: {bar3(T)}.                |         |
                                           |         |
-type bar3(T) :: bar1(T).                  |         |
                                           |         |
-type test1() :: misc:o() | {test1()}.     |         |
-type test2(X, Y) :: misc:o() | {          |         |
  misc:o(),                                |         |
  test2(X, Y), {},                         |         |
  {a},                                     |         |
  opaque:opair(a, b),                      |         |
  fun((ok) -> test3(X, Y)),                |         |
  #{string() => v},                        |         |
  #{string() => v},                        |         |
  #{k := a, k2 := b }                      |         |
}.                                         |         |
-type test3(X, Y) :: misc:o() | {          |         |
  misc:o(),                                |         |
  test2(Y, X),                             |         |
  {a},                                     |         |
  opaque:opair(a, b),                      |         |
  fun((ok) -> test2(Y, X)),                |         |
  #{string() => v},                        |         |
  #{number() => v},                        |         |
  #{k := v, k2 => v2}                      |         |
}.                                         |         |
-type test4() :: {test4()}.                |         |
                                           |         |
-type x_cycle() :: misc:x_cycle().         | INVALID | recursive type x_cycle/0 is not productive

                                           |         |
-type struct_literal() ::                  |         |
    {string(), [{string(), thrift_constant……         |
                                           |         |
-type thrift_constant() ::                 |         |
    {bool, boolean()}                      |         |
    | {int, integer()}                     |         |
    | {float, string()}                    |         |
    | {string, string()}                   |         |
    | {identifier, string()}               |         |
    | {list, list(thrift_constant())}      |         |
    | {map, [{thrift_constant(), thrift_co……         |
    | {struct, struct_literal()}.          |         |
                                           |         |
-spec trick_me                             |         |
({thrift_constant(),                       |         |
thrift_constant()},                        |         |
thrift_constant()) -> none().              |         |
trick_me(X, X) -> X.                       | OK      |
                                           |         |
-type simple_id(X) :: X.                   |         |
                                           |         |
-type t_tree1(Z) ::                        |         |
  {leaf, Z} |                              |         |
  {node, t_tree1(Z)}.                      |         |
                                           |         |
%% Typed Racket accepts it:                |         |
%% (define-type (Id a) a)                  |         |
%% (define-type (Tree a)                   |         |
%%  (Union (List 'leaf a)                  |         |
%%         (List 'node (Tree (Id a)))))    |         |
%% It seems that under the hood Typed Rack……         |
%% separates type aliases into recursive a……         |
%% non-recursive ones and eagerly (call-by……         |
%% unfolds non-recursive one.              |         |
-type t_tree2(Z) ::                        | INVALID | recursive type t_tree2/1 is not productive

  {leaf, Z} |                              |         |
  {node, t_tree2(simple_id(Z))}.           |         |
                                           |         |
-type t_tree3(Z) ::                        | INVALID | recursive type t_tree3/1 is not productive

  {leaf, Z} |                              |         |
  {node, t_tree3(t_tree3(Z))}.             |         |
                                           |         |
-type stream1(Z) ::                        |         |
  {chunk, stream1(Z)}.                     |         |
                                           |         |
%% Typed Racket accepts it                 |         |
%% (define-type (Id a) a)                  |         |
%% (define-type                            |         |
%%   (Stream2 a)                           |         |
%%     (List 'chunk (Stream2 (Id a))))     |         |
-type stream2(Z) ::                        | INVALID | recursive type stream2/1 is not productive

  {chunk, stream2(simple_id(Z))}.          |         |
                                           |         |
%% Typed Racket rejects it                 |         |
%% (define-type (DStream a)                |         |
%%   (List 'chunk (DStream (List a))))     |         |
%% recursive type cannot be applied        |         |
%% at a different type in its recursive in……         |
%%  type: DStream                          |         |
%%  new argument name: #<syntax:3-unsaved-……         |
%%  new argument: (List a)                 |         |
%%  new arguments...: ((List a))           |         |
-type d_stream(Z) ::                       | INVALID | recursive type d_stream/1 is not productive

  {chunk, d_stream([Z])}.                  |         |
                                           |         |
-type invalid_ty() :: non_exist:invalid(). | INVALID | Unknown id: non_exist:invalid/0

                                           |         |
-type invalid_rec() ::                     | INVALID | invalid_rec/0 references type with invalid definition: invalid_ty/0

  invalid_ty() | invalid_transitive().     |         |
                                           |         |
-type invalid_transitive() ::              |         |
  {a, invalid_rec()}.                      |         |
                                           |         |
-spec use_invalid                          |         |
  (invalid_transitive()) -> a.             |         |
use_invalid({A, _}) -> A.                  | OK      |
