%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(type_aliases).                     |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-type w_unbound_var() :: {_A, _B}.         | INVALID | _A: Type variable is unbound.

-type trans_unbound_var()                  | INVALID | trans_unbound_var/0 references type with invalid definition: w_unbound_var/0

    :: w_unbound_var().                    |         |
                                           |         |
-spec uses_ty_w_unbound_var(_A, _B) ->     | INVALID | uses_ty_w_unbound_var/2 references type with invalid definition: w_unbound_var/0

    w_unbound_var().                       |         |
uses_ty_w_unbound_var(A, B) -> {A, B}.     | NO SPEC |
                                           |         |
-spec uses_trans_unbound_var(_A, _B) ->    | INVALID | uses_trans_unbound_var/2 references type with invalid definition: trans_unbound_var/0

    trans_unbound_var().                   |         |
uses_trans_unbound_var(A, B) -> {A, B}.    | NO SPEC |
                                           |         |
-type w_unbound_var2()                     | INVALID | _A: Type variable is unbound.

    :: _A.                                 |         |
                                           |         |
-spec uses_ty_w_unbound_var2() ->          | INVALID | uses_ty_w_unbound_var2/0 references type with invalid definition: w_unbound_var2/0

    w_unbound_var2().                      |         |
uses_ty_w_unbound_var2() -> 1.             | NO SPEC |
                                           |         |
-type repeated(T, T) :: T.                 | INVALID | T. Type vars in type declarations must be distinct

                                           |         |
-spec test_repeated1_neg(a, b) ->          | INVALID | test_repeated1_neg/2 references type with invalid definition: repeated/2

    repeated(a, b).                        |         |
test_repeated1_neg(b, a) -> a.             | NO SPEC |
                                           |         |
-spec test_repeated2_neg(a, b) ->          | INVALID | test_repeated2_neg/2 references type with invalid definition: repeated/2

    repeated(a, b).                        |         |
test_repeated2_neg(a, b) -> b.             | NO SPEC |
                                           |         |
%% see T102518744                          |         |
-spec test_use_bad_type                    | INVALID | test_use_bad_type/1 references type with invalid definition: w_unbound_var/0

(undefined | w_unbound_var()) ->           |         |
    w_unbound_var() | undefined.           |         |
test_use_bad_type(X) ->                    | NO SPEC |
    X.                                     |         |
                                           |         |
-spec ttt(T, T) -> T.                      |         |
ttt(X, X) -> X.                            | OK      |
                                           |         |
-spec test_use_bad_type_gen(               | INVALID | test_use_bad_type_gen/2 references type with invalid definition: w_unbound_var/0

    w_unbound_var(),                       |         |
    undefined | w_unbound_var()) ->        |         |
        term().                            |         |
test_use_bad_type_gen(X, Union) ->         | NO SPEC |
    ttt(X, Union).                         |         |
                                           |         |
-type tup_w_unbound(T)                     | INVALID | _A: Type variable is unbound.

:: {T, _A}.                                |         |
                                           |         |
-spec unpack_tup_w_unbound(                | INVALID | unpack_tup_w_unbound/1 references type with invalid definition: tup_w_unbound/1

    tup_w_unbound(T)                       |         |
) -> T.                                    |         |
unpack_tup_w_unbound({X, _}) ->            | NO SPEC |
    X.                                     |         |
                                           |         |
-spec test_use_unpack_tup_w_unbound(       | INVALID | test_use_unpack_tup_w_unbound/1 references type with invalid definition: tup_w_unbound/1

    tup_w_unbound(a)) -> a.                |         |
test_use_unpack_tup_w_unbound(X) ->        | NO SPEC |
    unpack_tup_w_unbound(X).               |         |
                                           |         |
-spec test_use_tup_w_unbound_cov(          | INVALID | test_use_tup_w_unbound_cov/1 references type with invalid definition: tup_w_unbound/1

    tup_w_unbound(a)) ->                   |         |
    tup_w_unbound(a | b) .                 |         |
test_use_tup_w_unbound_cov(X) ->           | NO SPEC |
    X.                                     |         |
                                           |         |
-spec test_use_tup_w_unbound_contra_neg(   | INVALID | test_use_tup_w_unbound_contra_neg/1 references type with invalid definition: tup_w_unbound/1

    tup_w_unbound(a | b)) ->               |         |
    tup_w_unbound(a) .                     |         |
test_use_tup_w_unbound_contra_neg(X) ->    | NO SPEC |
    X.                                     |         |
                                           |         |
-spec test_use_tup_w_unbound_contra_neg2(  | INVALID | test_use_tup_w_unbound_contra_neg2/1 references types with invalid definitions: tup_w_unbound/1, w_unbound_var/0

    tup_w_unbound(a | b)) ->               |         |
    tup_w_unbound(a) | w_unbound_var().    |         |
test_use_tup_w_unbound_contra_neg2(X) ->   | NO SPEC |
    X.                                     |         |
                                           |         |
-type loop() :: loop().                    | INVALID | recursive type loop/0 is not productive

                                           |         |
-record(rec1, {l :: loop() | undefined}).  | INVALID | rec1 references type with invalid definition: loop/0

-record(rec2, {l :: undefined | loop()}).  | INVALID | rec2 references type with invalid definition: loop/0

                                           |         |
-spec same(A, A) -> A.                     |         |
same(X, X) -> X.                           | OK      |
                                           |         |
-spec id(A) -> A.                          |         |
id(X) -> X.                                | OK      |
                                           |         |
-spec convert(any(), any()) -> none().     |         |
convert(#rec1{l = L1}, #rec2{l = L2}) ->   | ERROR   | Unbound rec: rec1

    same(id(L1), L2),                      |         |
    L2.                                    |         |
                                           |         |
-type bad_inside() ::                      | INVALID |
    opaque:opair(a, x:y()).                |         | Unknown id: x:y/0

                                           |         |
-spec use_bad_inside_neg(                  | INVALID | use_bad_inside_neg/1 references type with invalid definition: bad_inside/0

   bad_inside()                            |         |
) -> bad_inside().                         |         |
use_bad_inside_neg(X) -> X.                | NO SPEC |
