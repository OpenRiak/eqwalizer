%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(strict_receive).                   |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec receive_number1()                    |         |
      -> number().                         |         |
receive_number1() ->                       | OK      |
  receive                                  |         |
    {number, N} -> N;                      |         |
    N when is_number(N) -> N               |         |
  end.                                     |         |
                                           |         |
-spec receive_number2()                    |         |
      -> number().                         |         |
receive_number2() ->                       | OK      |
  Res = receive                            |         |
    {number, N} -> N;                      |         |
    N when is_number(N) -> N               |         |
  end,                                     |         |
  Res.                                     |         |
                                           |         |
-spec receive_number_timeout1()            |         |
      -> number().                         |         |
receive_number_timeout1() ->               | OK      |
  receive                                  |         |
    {number, N} -> N;                      |         |
    N when is_number(N) -> N               |         |
  after 100 ->                             |         |
    0                                      |         |
  end.                                     |         |
                                           |         |
-spec receive_number_timeout2()            |         |
      -> number().                         |         |
receive_number_timeout2() ->               | OK      |
  Res = receive                            |         |
    {number, N} -> N;                      |         |
    N when is_number(N) -> N               |         |
  after 100 ->                             |         |
    0                                      |         |
  end,                                     |         |
  Res.                                     |         |
                                           |         |
-spec sleep1(pos_integer()) -> ok.         |         |
sleep1(T) ->                               | OK      |
  receive                                  |         |
  after T -> ok                            |         |
  end.                                     |         |
                                           |         |
-spec sleep2a(timeout()) -> ok.            |         |
sleep2a(T) ->                              | OK      |
  receive                                  |         |
  after T -> ok                            |         |
  end.                                     |         |
                                           |         |
-spec sleep2b(timeout()) -> ok.            |         |
sleep2b(T) ->                              | OK      |
  Res =                                    |         |
    receive                                |         |
    after T -> ok                          |         |
    end,                                   |         |
  Res.                                     |         |
                                           |         |
-spec sleep3_neg(atom()) -> ok.            |         |
sleep3_neg(T) ->                           | ERROR   |
  receive                                  |         |
  after T -> ok                            |         | T.
                                           |         | Expression has type:   atom()
                                           |         | Context expected type: timeout()
  end.                                     |         |
