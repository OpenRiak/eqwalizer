%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(tagged_tuples).                    |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
% ordinary tagged tuples                   |         |
-type result(Res, Err) ::                  |         |
    {ok, Res} | {err, Err}.                |         |
                                           |         |
% "reversed" tagged tuples                 |         |
% the tag/marker is the last element       |         |
-type r_result(Res, Err) ::                |         |
    {Res, ok} | {Err, err}.                |         |
                                           |         |
-spec mk_result(boolean()) ->              |         |
    result(atom(), binary()).              |         |
mk_result(true) -> {ok, result};           | OK      |
mk_result(false) -> {err, <<>>}.           |         |
                                           |         |
-spec test(boolean()) -> atom().           |         |
test(B) ->                                 | OK      |
    case mk_result(B) of                   |         |
        {ok, X} -> X;                      |         |
        {err, _} -> err                    |         |
    end.                                   |         |
                                           |         |
-spec mk_r_result(boolean()) ->            |         |
    r_result(atom(), binary()).            |         |
mk_r_result(true) -> {result, ok};         | OK      |
mk_r_result(false) -> {<<>>, err}.         |         |
                                           |         |
-spec test_r(boolean()) -> atom().         |         |
test_r(B) ->                               | OK      |
    case mk_r_result(B) of                 |         |
        {X, ok} ->                         |         |
            X;                             |         |
        {Z, err} ->                        |         |
            erlang:binary_to_atom(Z)       |         |
    end.                                   |         |
                                           |         |
-type marked_tuple()                       |         |
    :: {number(), atom()}                  |         |
     | {atom(), number()}.                 |         |
                                           |         |
% extract atom directly                    |         |
-spec get_atom1(marked_tuple()) -> atom(). |         |
get_atom1({_, A}) when is_atom(A) -> A;    | OK      |
get_atom1({A, _}) when is_atom(A) -> A.    |         |
                                           |         |
% extract atom by elimination              |         |
-spec get_atom2(marked_tuple()) -> atom(). |         |
get_atom2({N, A}) when is_number(N) -> A;  | OK      |
get_atom2({A, N}) when is_number(N) -> A.  |         |
                                           |         |
% the tag is nested and a bit indirect     |         |
-type deep_tagged_tuple() ::               |         |
{{id, atom()}, {age, number()}} |          |         |
{{borough, string()}, {city, string()}}.   |         |
                                           |         |
-spec get_age                              |         |
(deep_tagged_tuple()) -> number().         |         |
get_age({{id, _}, {_, A}}) -> A.           | OK      |
                                           |         |
-spec get_city                             |         |
    (deep_tagged_tuple()) -> string().     |         |
get_city({{borough, _}, {_, C}}) -> C.     | OK      |
                                           |         |
-type file_result() ::                     |         |
{ok, Handle :: integer()}                  |         |
| {error, Reason :: string()}.             |         |
                                           |         |
-spec file_open() -> file_result().        |         |
file_open() ->                             | OK      |
    case rand:uniform(2) of                |         |
        1 -> {ok, 20};                     |         |
        2 -> {error, "ENOTFOUND"}          |         |
    end.                                   |         |
