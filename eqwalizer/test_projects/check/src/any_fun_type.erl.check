%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(any_fun_type).                     |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
% fun() is like f0() | f1() | f3() ...     |         |
-type f0() :: fun(() -> any()).            |         |
-type f1() :: fun((any()) -> any()).       |         |
-type f2() ::                              |         |
    fun((any(), any()) -> any()).          |         |
-type f3() ::                              |         |
    fun((any(), any(), any()) -> any()).   |         |
                                           |         |
-spec f0_to_f_any_pos(f0()) -> fun().      |         |
f0_to_f_any_pos(F) -> F.                   | OK      |
                                           |         |
-spec f1_to_f_any_pos(f1()) -> fun().      |         |
f1_to_f_any_pos(F) -> F.                   | OK      |
                                           |         |
-spec fs_to_f_any_pos(                     |         |
    f0() | f1() | f2() | f3()              |         |
) -> fun().                                |         |
fs_to_f_any_pos(F) -> F.                   | OK      |
                                           |         |
-spec to_f_any_pos(                        |         |
    fun((any(), any()) -> pid())           |         |
) -> fun().                                |         |
to_f_any_pos(F) -> F.                      | OK      |
                                           |         |
-spec to_f_any_neg1(                       |         |
    fun((atom()) -> pid())                 |         |
) -> fun().                                |         |
to_f_any_neg1(F) -> F.                     | ERROR   | F.
                                           |         | Expected: fun()
                                           |         | Got     : fun((atom()) -> pid())
                                           |         |
-spec to_f_any_neg2(                       |         |
    f0 | fun((atom()) -> pid()) | f1       |         |
) -> fun().                                |         |
to_f_any_neg2(F) -> F.                     | ERROR   | F.
                                           |         | Expected: fun()
                                           |         | Got     : 'f0' | fun((atom()) -> pid()) | 'f1'
                                           |         |
-spec f_any_to_f0_neg(fun()) -> f0.        |         |
f_any_to_f0_neg(F) -> F.                   | ERROR   | F.
                                           |         | Expected: 'f0'
                                           |         | Got     : fun()
                                           |         |
-spec guard01_pos(any()) -> fun().         |         |
guard01_pos(F)                             | OK      |
    when is_function(F, 1) -> F.           |         |
                                           |         |
-spec guard02_pos(any()) -> f1().          |         |
guard02_pos(F)                             | OK      |
    when is_function(F, 1) -> F.           |         |
                                           |         |
-spec guard03_neg(any()) -> f2().          |         |
guard03_neg(F)                             | ERROR   |
    when is_function(F, 1) -> F.           |         | F.
                                           |         | Expected: f2()
                                           |         | Got     : fun((term()) -> term())
                                           |         | 
                                           |         |   fun((term()) -> term()) is not a subtype of f2()
                                           |         |   because
                                           |         |   fun((term()) -> term()) is not a subtype of fun((term(), term()) -> term())
                                           |         |
-spec a_to_a(none()) -> a.                 |         |
a_to_a(a) -> a.                            | OK      |
                                           |         |
-spec unsound() -> any().                  |         |
unsound() ->                               | OK      |
    F = fun a_to_a/1,                      |         |
    if                                     |         |
        is_function(F, 1) ->               |         |
            F(3);                          |         |
        true ->                            |         |
            a                              |         |
    end.                                   |         |
                                           |         |
-type f4(T) :: fun((...) -> T).            |         |
                                           |         |
-type f5(T) :: fun((term()) -> T).         |         |
                                           |         |
-type f6(T) :: fun((term(), term()) -> T). |         |
                                           |         |
-spec f4_to_f(f4(term())) -> fun().        |         |
f4_to_f(F) -> F.                           | OK      |
                                           |         |
-spec f5_to_f4(f5(term())) -> f4(term()).  |         |
f5_to_f4(F) -> F.                          | OK      |
                                           |         |
-spec f5_to_f4_cov(f5(a)) -> f4(a | b).    |         |
f5_to_f4_cov(F) -> F.                      | OK      |
                                           |         |
-spec f5_to_f4_cov_neg(f5(a | b)) -> f4(a)……         |
f5_to_f4_cov_neg(F) -> F.                  | OK      |
                                           |         |
-spec f5_or_f6_to_f4(f5(atom()) | f6(numbe……         |
f5_or_f6_to_f4(F) -> F.                    | OK      |
                                           |         |
-spec apply_f4_neg(f4(number())) -> boolea……         |
apply_f4_neg(F) -> F(a).                   | ERROR   | F.
                                           |         | Expected fun type with arity 1
                                           |         | Got: f4(number())
                                           |         |
-spec f4_id_T(f4(T)) -> f4(T).             |         |
f4_id_T(F) -> F.                           | OK      |
                                           |         |
-spec apply_f4_id(f4(a)) -> f4(a | b).     |         |
apply_f4_id(F) -> f4_id_T(F).              | OK      |
                                           |         |
-spec fun_to_f4_neg(fun()) -> f4(term()).  |         |
fun_to_f4_neg(F) -> F.                     | OK      |
                                           |         |
-spec fun2_to_f4(fun((term()) -> a)) -> f4……         |
fun2_to_f4(F) -> F.                        | OK      |
                                           |         |
-spec fun3_to_f4_neg(fun((term()) -> a | b……         |
fun3_to_f4_neg(F) -> F.                    | OK      |
                                           |         |
-spec f4_to_fun_neg(f4(a)) -> fun((term())……         |
f4_to_fun_neg(F) -> F.                     | ERROR   | F.
                                           |         | Expected: fun((term()) -> 'a' | 'b')
                                           |         | Got     : f4('a')
                                           |         | 
                                           |         |   f4('a') is not a subtype of fun((term()) -> 'a' | 'b')
                                           |         |   because
                                           |         |   fun() is not a subtype of fun((term()) -> 'a' | 'b')
                                           |         |
-spec map_f1(fun((term()) -> atom()), [ter……         |
map_f1(F, Ts) -> lists:map(F, Ts).         | OK      |
                                           |         |
-spec map_f2(fun((term()) -> atom()), [ter……         |
map_f2(F, Ts) -> lists:map(F, Ts).         | OK      |
                                           |         |
-spec map_f3_neg(fun((...) -> atom()), [te……         |
map_f3_neg(F, Ts) -> lists:map(F, Ts).     | ERROR   | F.
                                           |         | Expected: fun((A) -> B)
                                           |         | Got     : fun()
                                           |         |
-spec map_f4_neg(fun((...) -> A), [term()]……         |
map_f4_neg(F, Ts) -> lists:map(F, Ts).     | ERROR   | F.
                                           |         | Expected: fun((A) -> B)
                                           |         | Got     : fun()
                                           |         |
-spec map_f5(fun((term()) -> atom()), [ter……         |
map_f5(F, Ts) -> map_f4_neg(F, Ts).        | OK      |
