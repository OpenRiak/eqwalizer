%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(type_asserts).                     |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec assert1(term()) -> binary().         |         |
assert1(Arg) ->                            | OK      |
  is_binary(Arg) orelse throw(bad_arg),    |         |
  Arg.                                     |         |
                                           |         |
-spec assert2(term()) -> binary().         |         |
assert2(Arg) ->                            | OK      |
  is_binary(Arg) orelse error(bad_arg),    |         |
  Arg.                                     |         |
                                           |         |
-spec assert3(binary() | undefined)        |         |
      -> binary().                         |         |
assert3(Arg) ->                            | OK      |
  Arg =/= undefined orelse throw(bad_arg), |         |
  Arg.                                     |         |
                                           |         |
-spec assert4(binary() | undefined)        |         |
      -> binary().                         |         |
assert4(Arg) ->                            | OK      |
  Arg =/= undefined orelse error(bad_arg), |         |
  Arg.                                     |         |
                                           |         |
-spec assert5_neg(                         |         |
    string() | binary()                    |         |
) -> binary().                             |         |
assert5_neg(Arg) ->                        | ERROR   |
  is_list(Arg) orelse throw(bad_arg),      |         |
  Arg.                                     |         | Arg.
                                           |         | Expression has type:   string()
                                           |         | Context expected type: binary()
                                           |         |
%% we don't support not yet                |         |
-spec assert6(                             |         |
    string() | binary()                    |         |
) -> binary().                             |         |
assert6(Arg) ->                            | ERROR   |
  (not is_list(Arg))                       |         |
    orelse throw(bad_arg),                 |         |
  Arg.                                     |         | Arg.
                                           |         | Expression has type:   string() | binary()
                                           |         | Context expected type: binary()
                                           |         | 
                                           |         |   string() | binary() is not compatible with binary()
                                           |         |   because
                                           |         |   string() is not compatible with binary()
                                           |         |
-spec any_to_atom1(                        |         |
    string() | binary()                    |         |
) -> false | atom().                       |         |
any_to_atom1(A) ->                         | OK      |
  Res = is_list(A)                         |         |
    andalso list_to_atom(A),               |         |
  Res.                                     |         |
                                           |         |
-spec any_to_atom2(                        |         |
    string() | binary()                    |         |
) -> false | atom().                       |         |
any_to_atom2(A) ->                         | ERROR   |
  is_binary(A)                             |         |
    andalso list_to_atom(A).               |         | A.
                                           |         | Expression has type:   binary()
                                           |         | Context expected type: string()
                                           |         |
-spec any_to_atom3_neg(                    |         |
    term()                                 |         |
) -> false | atom().                       |         |
any_to_atom3_neg(A) ->                     | ERROR   |
  is_binary(A)                             |         |
    andalso list_to_atom(A).               |         | A.
                                           |         | Expression has type:   binary()
                                           |         | Context expected type: string()
                                           |         |
-spec double_andalso(                      |         |
    term(), term()                         |         |
) -> false | {number(), atom()}.           |         |
double_andalso(N, A) ->                    | OK      |
  is_number(N)                             |         |
    andalso is_atom(A)                     |         |
      andalso {N, A}.                      |         |
                                           |         |
-spec double_andalso_neg(                  |         |
    term(), term()                         |         |
) -> false |  {atom(), number()}.          |         |
double_andalso_neg(N, A) ->                | ERROR   |
  is_number(N)                             |         | _ andalso _.
                                           |         | Expression has type:   'false' | {number(), atom()}
                                           |         | Context expected type: 'false' | {atom(), number()}
                                           |         | 
                                           |         |   'false' | {number(), atom()} is not compatible with 'false' | {atom(), number()}
                                           |         |   because
                                           |         |   {number(), atom()} is not compatible with 'false' | {atom(), number()}
                                           |         |   because
                                           |         |   {number(), atom()} is not compatible with 'false'
    andalso is_atom(A)                     |         |
    andalso {N, A}.                        |         |
                                           |         |
-spec scope_neg(term())                    |         |
      -> {false | number(), number()}.     |         |
scope_neg(A) ->                            | ERROR   |
  X = is_number(A) andalso A,              |         |
  {X, A}.                                  |         | {X, A}.
                                           |         | Expression has type:   {'false' | number(), term()}
                                           |         | Context expected type: {'false' | number(), number()}
                                           |         | 
                                           |         |   at tuple index 2:
                                           |         |   {'false' | number(), term()} is not compatible with {'false' | number(), number()}
                                           |         |   because
                                           |         |   term() is not compatible with number()
