%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(type_predicates).                  |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec any_tuple(any()) -> tuple().         |         |
any_tuple(T) when is_tuple(T) -> T;        | OK      |
any_tuple(_) -> {}.                        |         |
                                           |         |
-spec tuple_slice                          |         |
    ({any(), any()} | number())            |         |
    -> {any(), any()} | {}.                |         |
tuple_slice(T) when is_tuple(T) -> T;      | OK      |
tuple_slice(_) -> {}.                      |         |
                                           |         |
-spec tuple_gen                            |         |
    ({} | {any()} | {any(), any()}) ->     |         |
    tuple().                               |         |
tuple_gen(T) -> T.                         | OK      |
                                           |         |
-spec any_list(any()) -> list().           |         |
any_list(L) when is_list(L) -> L;          | OK      |
any_list(_) -> [].                         |         |
                                           |         |
-spec list_slice([a] | tuple()) -> [a].    |         |
list_slice(L) when is_list(L) -> L;        | OK      |
list_slice(_) -> [].                       |         |
                                           |         |
-spec list_gen                             |         |
    ([number()] | [atom()]) -> list().     |         |
list_gen(L) -> L.                          | OK      |
                                           |         |
-spec any_binary(any()) -> binary().       |         |
any_binary(B) when is_binary(B) -> B;      | OK      |
any_binary(_) -> <<>>.                     |         |
                                           |         |
-spec any_bitstring(any()) -> bitstring(). |         |
any_bitstring(B)                           | OK      |
    when is_bitstring(B) -> B;             |         |
any_bitstring(_) -> <<>>.                  |         |
                                           |         |
-spec binary_slice                         |         |
    (binary() | list()) -> binary().       |         |
binary_slice(B) when is_binary(B) -> B.    | OK      |
                                           |         |
-spec unit_fun() -> {}.                    |         |
unit_fun() -> {}.                          | OK      |
                                           |         |
-spec id_any(any()) -> any().              |         |
id_any(X) -> X.                            | OK      |
                                           |         |
-spec any_fun(any()) -> fun().             |         |
any_fun(F) when is_function(F) -> F;       | OK      |
any_fun(_) -> fun unit_fun/0.              |         |
                                           |         |
-spec fun_slice                            |         |
    (fun((any()) -> any()) | atom())       |         |
    -> fun((any()) -> any()).              |         |
fun_slice(F) when is_function(F) -> F;     | OK      |
fun_slice(_) -> fun id_any/1.              |         |
                                           |         |
-record(rec1, {id :: atom()}).             |         |
-record(rec2, {id :: atom()}).             |         |
                                           |         |
-spec rec_slice                            |         |
    (#rec1{} | atom()) -> #rec1{}.         |         |
rec_slice(R)                               | OK      |
    when is_record(R, rec1) -> R;          |         |
rec_slice(A)                               |         |
    when is_atom(A) -> #rec1{id = A}.      |         |
                                           |         |
-spec rec_slice1                           |         |
    (#rec1{} | atom()) -> #rec1{}.         |         |
rec_slice1(R)                              | OK      |
    when is_record(R, rec1, 1) -> R;       |         |
rec_slice1(A)                              |         |
    when is_atom(A) -> #rec1{id = A}.      |         |
                                           |         |
-spec as_rec1                              |         |
    (#rec1{} | #rec2{}) -> #rec1{}.        |         |
as_rec1(R)                                 | OK      |
    when is_record(R, rec1) -> R;          |         |
as_rec1(R)                                 |         |
    when is_record(R, rec2) ->             |         |
        #rec1{id = R#rec2.id}.             |         |
                                           |         |
-spec as_rec1a                             |         |
    (#rec1{} | #rec2{}) -> #rec1{}.        |         |
as_rec1a(R)                                | OK      |
    when is_record(R, rec1, 1) -> R;       |         |
as_rec1a(R)                                |         |
    when is_record(R, rec2, 1) ->          |         |
    #rec1{id = R#rec2.id}.                 |         |
                                           |         |
-spec as_rec1_neg                          |         |
    (#rec1{} | #rec2{}) -> #rec1{}.        |         |
as_rec1_neg(R)                             | ERROR   |
    when is_record(R, rec2) -> R.          |         | R.
                                           |         | Expected: #rec1{}
                                           |         | Got     : none() | #rec2{}
                                           |         | 
                                           |         |   none() | #rec2{} is not a subtype of #rec1{}
                                           |         |   because
                                           |         |   #rec2{} is not a subtype of #rec1{}
                                           |         |
-spec as_rec1a_neg                         |         |
    (#rec1{} | #rec2{}) -> #rec1{}.        |         |
as_rec1a_neg(R)                            | ERROR   |
    when is_record(R, rec2, 1) -> R.       |         | R.
                                           |         | Expected: #rec1{}
                                           |         | Got     : none() | #rec2{}
                                           |         | 
                                           |         |   none() | #rec2{} is not a subtype of #rec1{}
                                           |         |   because
                                           |         |   #rec2{} is not a subtype of #rec1{}
                                           |         |
-spec any_fun_x(any()) -> fun().           |         |
any_fun_x(F) when is_function(F, 2) -> F;  | OK      |
any_fun_x(F) when is_function(F, 3) -> F;  |         |
any_fun_x(_) -> fun unit_fun/0.            |         |
                                           |         |
-spec any_fun_x(any(), number()) -> fun(). |         |
any_fun_x(F, Arity)                        | OK      |
    when is_function(F, Arity) -> F;       |         |
any_fun_x(_, _) -> fun unit_fun/0.         |         |
                                           |         |
-spec any_mk(any(), any()) -> map().       |         |
any_mk(M, K) when is_map_key(K, M) -> M;   | OK      |
any_mk(_, _) -> #{}.                       |         |
                                           |         |
-record(f0, {                              |         |
    f :: fun(() -> any())                  |         |
}).                                        |         |
-record(f1, {                              |         |
    f :: fun((any()) -> any())             |         |
}).                                        |         |
-record(f2, {                              |         |
    f :: fun((any(), any()) -> any())      |         |
}).                                        |         |
                                           |         |
-type fs() :: #f0{} | #f1{} | #f2{}.       |         |
                                           |         |
-spec as_fs(any()) -> fs().                |         |
as_fs(F) when is_function(F, 0) ->         | OK      |
    #f0{f = F};                            |         |
as_fs(F) when is_function(F, 1) ->         |         |
    #f1{f = F};                            |         |
as_fs(F) when is_function(F, 2) ->         |         |
    #f2{f = F}.                            |         |
                                           |         |
-spec as_f0_neg(any(), any()) -> fs().     |         |
as_f0_neg(F, A)                            | ERROR   |
    when is_function(F, A) -> #f0{f = F}.  |         | F.
                                           |         | Expected: fun(() -> any())
                                           |         | Got     : fun()
                                           |         |
-spec as_f1_neg(any()) -> #f1{}.           |         |
as_f1_neg(F)                               | ERROR   |
    when is_function(F, 2) -> #f1{f = F}.  |         | F.
                                           |         | Expected: fun((any()) -> any())
                                           |         | Got     : fun((any(), any()) -> any())
