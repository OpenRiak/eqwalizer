%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(subtype_pos).                      |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-type ab() :: a | b.                       |         |
-type pair_diff_elems() ::                 |         |
    {a, b} | {b, a}.                       |         |
-type pair_ab() ::                         |         |
    {ab(), ab()}.                          |         |
                                           |         |
-spec f01({A, A}) -> any().                |         |
f01(X) -> X.                               | OK      |
                                           |         |
-spec f02(atom()) -> any().                |         |
f02(X) -> X.                               | OK      |
                                           |         |
-spec f03 (fun((any()) -> atom())) ->      |         |
    fun((atom()) -> any()).                |         |
f03(F) -> F.                               | OK      |
                                           |         |
-spec f04(a | b) -> (a | b | c).           |         |
f04(X) -> X.                               | OK      |
                                           |         |
-spec f05(none() | none()) -> a | b.       |         |
f05(X) -> X.                               | OK      |
                                           |         |
-spec f06({a, b} | {b, a}) ->              |         |
           {a | b, a | b}.                 |         |
f06(X) -> X.                               | OK      |
                                           |         |
-spec f07(pair_diff_elems()) ->            |         |
    pair_ab().                             |         |
f07(X) -> X.                               | OK      |
                                           |         |
-spec f08(none()) -> {none(), none()}.     |         |
f08(X) -> X.                               | OK      |
                                           |         |
-spec map01(#{}) -> map().                 |         |
map01(M) -> M.                             | OK      |
                                           |         |
-spec map02(#{a := atom()})                |         |
    -> #{a => atom()}.                     |         |
map02(M) -> M.                             | OK      |
                                           |         |
-spec map03(#{a := atom(), b => atom()})   |         |
        -> #{atom() => atom()}.            |         |
map03(M) -> M.                             | OK      |
                                           |         |
-spec map04(#{                             |         |
    a := a | b,                            |         |
    b => a | b                             |         |
}) -> #{a | b => a | b}.                   |         |
map04(M) -> M.                             | OK      |
                                           |         |
-spec map05(#{                             |         |
    a := a | b,                            |         |
    b => a | b                             |         |
}) -> #{a | b => a | b | c}.               |         |
map05(M) -> M.                             | OK      |
                                           |         |
-spec map06(#{atom() => integer()})        |         |
    -> #{any() => integer()}.              |         |
map06(M) -> M.                             | OK      |
                                           |         |
-spec map07(#{atom() => integer()})        |         |
        -> #{atom() => any()}.             |         |
map07(M) -> M.                             | OK      |
                                           |         |
-spec map08(#{})                           |         |
        -> #{atom() => any()}.             |         |
map08(M) -> M.                             | OK      |
                                           |         |
-spec ty_var_sub_any_1(T, T) -> any().     |         |
ty_var_sub_any_1(T, T) -> T.               | OK      |
                                           |         |
-spec ty_var_sub_any_2(T, T) -> any().     |         |
ty_var_sub_any_2(T, T) ->                  | OK      |
    X = T,                                 |         |
    X.                                     |         |
                                           |         |
-spec id(T) -> T.                          |         |
id(X) -> X.                                | OK      |
                                           |         |
-spec foralls_matter() -> unreachable.     |         |
foralls_matter() ->                        | OK      |
    X = fun erlang:is_number/1,            |         |
    case (fun id/1) of                     |         |
        X -> X                             |         |
        end.                               |         |
                                           |         |
-spec iolist1([]) -> iolist().             |         |
iolist1(L) -> L.                           | OK      |
                                           |         |
-spec iolist2([binary()]) -> iolist().     |         |
iolist2(L) -> L.                           | OK      |
                                           |         |
-spec iolist3([non_neg_integer()]) -> ioli……         |
iolist3(L) -> L.                           | OK      |
                                           |         |
-spec iolist4([iolist()]) -> iolist().     |         |
iolist4(L) -> L.                           | OK      |
                                           |         |
-spec iolist5(                             |         |
    [binary() | non_neg_integer() | iolist……         |
) -> iolist().                             |         |
iolist5(L) -> L.                           | OK      |
                                           |         |
% When EQWALIZER_STRICT_INTEGERS is false, |         |
% all integer types are Subtype.eqv        |         |
-spec num_1(pos_integer()) ->              |         |
    neg_integer().                         |         |
num_1(X) -> X.                             | OK      |
                                           |         |
-spec num_2(neg_integer()) ->              |         |
    pos_integer().                         |         |
num_2(X) -> X.                             | OK      |
                                           |         |
-spec num_3(integer()) ->                  |         |
    non_neg_integer().                     |         |
num_3(X) -> X.                             | OK      |
                                           |         |
-spec nil_1([none()]) -> [].               |         |
nil_1(L) -> L.                             | OK      |
                                           |         |
-spec nil_2([none()]) -> [[]].             |         |
nil_2(L) -> L.                             | OK      |
                                           |         |
-spec nil_3([none() | none()]) -> [].      |         |
nil_3(L) -> L.                             | OK      |
