%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(otp_opaques).                      |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec to_gb_set1([atom()]) ->              |         |
    gb_sets:set(atom()).                   |         |
to_gb_set1(Atoms) ->                       | OK      |
    gb_sets:from_list(Atoms).              |         |
                                           |         |
-spec to_gb_set2_neg([atom()]) ->          |         |
    gb_sets:set(number()).                 |         |
to_gb_set2_neg(Atoms) ->                   | ERROR   |
    gb_sets:from_list(Atoms).              |         | gb_sets:from_list(Atoms).
                                           |         | Expected: gb_sets:set(number())
                                           |         | Got     : gb_sets:set(atom())
                                           |         | 
                                           |         |   gb_sets:set(atom()) is not a subtype of gb_sets:set(number())
                                           |         |   because
                                           |         |   atom() is not a subtype of number()
                                           |         |
-spec to_gb_set3([A]) ->                   |         |
    gb_sets:set(A).                        |         |
to_gb_set3(Elems) ->                       | OK      |
    gb_sets:from_list(Elems).              |         |
                                           |         |
-spec to_gb_set4([atom()]) ->              |         |
    gb_sets:set(atom() | number()).        |         |
to_gb_set4(Atoms) ->                       | OK      |
    gb_sets:from_list(Atoms).              |         |
                                           |         |
-spec uniques1([A]) ->                     |         |
    [A].                                   |         |
uniques1(Elems) ->                         | OK      |
    Set = gb_sets:from_list(Elems),        |         |
    List = gb_sets:to_list(Set),           |         |
    List.                                  |         |
                                           |         |
-spec uniques2_neg([[A]]) ->               |         |
    [A].                                   |         |
uniques2_neg(Elems) ->                     | ERROR   |
    Set = gb_sets:from_list(Elems),        |         |
    List = gb_sets:to_list(Set),           |         |
    List.                                  |         | List.
                                           |         | Expected: [A]
                                           |         | Got     : [[A]]
                                           |         | 
                                           |         |   [[A]] is not a subtype of [A]
                                           |         |   because
                                           |         |   [A] is not a subtype of A
                                           |         |
%% "Proper" version                        |         |
-spec union(Set1, Set2) -> Set3            |         |
    when                                   |         |
        Set1 :: gb_sets:set(A),            |         |
        Set2 :: gb_sets:set(B),            |         |
        Set3 :: gb_sets:set(A | B).        |         |
union(_, _) -> gb_sets:from_list([]).      | OK      |
                                           |         |
-spec uniques3([A], [B]) -> [A | B].       |         |
uniques3(Elems1, Elems2) ->                | OK      |
    Set1 = gb_sets:from_list(Elems1),      |         |
    Set2 = gb_sets:from_list(Elems2),      |         |
    UnionSet = gb_sets:union(Set1, Set2),  |         |
    UnionList = gb_sets:to_list(UnionSet), |         |
    UnionList.                             |         |
                                           |         |
-spec uniques4([A], [B]) -> [A | B]        |         |
    when A :: atom(), B :: number().       |         |
uniques4(Elems1, Elems2) ->                | OK      |
    Set1 = gb_sets:from_list(Elems1),      |         |
    Set2 = gb_sets:from_list(Elems2),      |         |
    UnionSet = gb_sets:union(Set1, Set2),  |         |
    UnionList = gb_sets:to_list(UnionSet), |         |
    UnionList.                             |         |
                                           |         |
-spec empty() -> gb_sets:set(any()).       |         |
%% gb_set:empty() is unbound               |         |
%% because it have an unbound type var     |         |
empty() -> gb_set:empty().                 | ERROR   | Unbound var: gb_set:empty/0

                                           |         |
-spec is_member(                           |         |
    atom(), [boolean()]                    |         |
) -> boolean().                            |         |
is_member(A, Bs) ->                        | OK      |
    Set = gb_sets:from_list(Bs),           |         |
    gb_sets:is_member(A, Set).             |         |
                                           |         |
% Dialyzer errors here                     |         |
-spec test1() -> any().                    |         |
test1() ->                                 | OK      |
    case sets:new() of                     |         |
        {X} -> X                           |         |
    end.                                   |         |
                                           |         |
% Dialyzer ignores this opacity violation  |         |
% https://github.com/erlang/otp/issues/511……         |
-spec test2() -> {term(), term()} | a.     |         |
test2() ->                                 | ERROR   |
    case rand:uniform(2) of                |         |
        1 -> gb_sets:new();                |         | gb_sets:new().
                                           |         | Expected: {any(), any()} | 'a'
                                           |         | Got     : gb_sets:set(none())
                                           |         | 
                                           |         |   gb_sets:set(none()) is not a subtype of {any(), any()} | 'a'
                                           |         |   because
                                           |         |   gb_sets:set(none()) is not a subtype of {any(), any()}
        2 -> a                             |         |
    end.                                   |         |
                                           |         |
-spec test3_neg(maps:iterator(k, v)) ->    |         |
    sets:set(a).                           |         |
test3_neg(X) -> X.                         | ERROR   | X.
                                           |         | Expected: sets:set('a')
                                           |         | Got     : maps:iterator('k', 'v')
                                           |         |
-spec ts(T, sets:set(a)) -> T.             |         |
ts(X, X) -> X.                             | ERROR   | X.
                                           |         | Expected: T
                                           |         | Got     : sets:set('a')
                                           |         |
-spec test4_neg(maps:iterator(k, v))       |         |
        -> nok.                            |         |
test4_neg(X) ->                            | ERROR   |
    ts(X, X),                              |         | X.
                                           |         | Expected: sets:set('a')
                                           |         | Got     : maps:iterator('k', 'v')
    nok.                                   |         |
                                           |         |
% We skip unions in opacity                |         |
% checks.                                  |         |
-spec test5_wip(                           |         |
    maps:iterator(k, v) |                  |         |
    sets:set(a)                            |         |
) -> ok.                                   |         |
test5_wip([_]) ->                          | OK      |
    ok.                                    |         |
                                           |         |
-spec test6_wip(                           |         |
    maps:iterator(k, v) |                  |         |
    sets:set(a)                            |         |
) -> nok.                                  |         |
test6_wip(X) ->                            | ERROR   |
    X().                                   |         | X.
                                           |         | Expected fun type with arity 0
                                           |         | Got: maps:iterator('k', 'v') | sets:set('a')
                                           |         |
-spec test7_neg(                           |         |
    sets:set(a)                            |         |
) -> nok.                                  |         |
test7_neg(X) ->                            | ERROR   |
    X().                                   |         | X.
                                           |         | Expected fun type with arity 0
                                           |         | Got: sets:set('a')
