%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(gradual_complex_types).            |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-type complex_map() :: #{                  |         |
id := integer(),                           |         |
{secret, id} => integer(),                 |         |
atom() => term()                           |         |
}.                                         |         |
                                           |         |
-spec mk_complex_map()                     |         |
      -> complex_map().                    |         |
mk_complex_map() ->                        | OK      |
  #{id => 1}.                              |         |
                                           |         |
-spec mk_complex_map_neg()                 |         |
      -> complex_map().                    |         |
mk_complex_map_neg() ->                    | ERROR   |
  undefined.                               |         | 'undefined'.
                                           |         | Expected: complex_map()
                                           |         | Got     : 'undefined'
                                           |         | 
                                           |         |   'undefined' is not a subtype of complex_map()
                                           |         |   because
                                           |         |   'undefined' is not a subtype of #D{dynamic() => dynamic()}
                                           |         |
-spec use_complex_map1(complex_map())      |         |
      -> complex_map().                    |         |
use_complex_map1(Map) ->                   | ERROR   |
  eqwalizer:reveal_type(Map),              |         | complex_map()

  Map.                                     |         |
                                           |         |
-spec use_complex_map2([complex_map()])    |         |
      -> [complex_map()].                  |         |
use_complex_map2(List) ->                  | ERROR   |
  eqwalizer:reveal_type(List),             |         | [complex_map()]

  List.                                    |         |
                                           |         |
-spec use_complex_map3()                   |         |
      -> integer().                        |         |
use_complex_map3() ->                      | OK      |
  Map = mk_complex_map(),                  |         |
  maps:get(id, Map).                       |         |
                                           |         |
-spec use_complex_map4_neg()               |         |
      -> integer().                        |         |
use_complex_map4_neg() ->                  | ERROR   |
  Map = mk_complex_map(),                  |         |
  lists:nth(7, Map).                       |         | Map.
                                           |         | Expected: [T]
                                           |         | Got     : complex_map()
                                           |         | 
                                           |         |   complex_map() is not a subtype of [T]
                                           |         |   because
                                           |         |   #D{dynamic() => dynamic()} is not a subtype of [T]
                                           |         |
-spec map_update_opt                       |         |
    (eqwalizer:dynamic())                  |         |
      -> eqwalizer:dynamic().              |         |
map_update_opt(M) ->                       | ERROR   |
  M1 = M#{a => 1},                         |         |
  eqwalizer:reveal_type(M1),               |         | dynamic()

  M1.                                      |         |
                                           |         |
-spec map_update_req                       |         |
    (eqwalizer:dynamic())                  |         |
      -> eqwalizer:dynamic().              |         |
map_update_req(M) ->                       | ERROR   |
  M1 = M#{a := 1},                         |         |
  eqwalizer:reveal_type(M1),               |         | dynamic()

  M1.                                      |         |
                                           |         |
-type dyn_map() :: #{                      |         |
  eqwalizer:dynamic() =>                   |         |
    eqwalizer:dynamic()                    |         |
}.                                         |         |
                                           |         |
-spec dyn_map_as_shape                     |         |
    (dyn_map())                            |         |
      -> #{a => atom(), b => binary()}.    |         |
dyn_map_as_shape(DM) ->                    | OK      |
  DM.                                      |         |
                                           |         |
-spec consume_shape                        |         |
    (#{a := atom(), b := binary()})        |         |
      -> {atom(), binary()}.               |         |
consume_shape(#{a := A, b := B})  ->       | OK      |
  {A, B}.                                  |         |
                                           |         |
use_consume_1                              | OK      |
(#{a := ok} = Shape) ->                    |         |
  consume_shape(Shape);                    |         |
use_consume_1                              |         |
(#{a := err}) ->                           |         |
  error(err).                              |         |
                                           |         |
use_consume_2                              | OK      |
(Shape = #{a := ok}) ->                    |         |
  consume_shape(Shape);                    |         |
use_consume_2                              |         |
(#{a := err}) ->                           |         |
  error(err).                              |         |
                                           |         |
use_consume_3                              | OK      |
(Shape = #{extra := ok}) ->                |         |
  consume_shape(Shape);                    |         |
use_consume_3                              |         |
(#{extra := err}) ->                       |         |
  error(err).                              |         |
                                           |         |
-spec generic(A, A) -> A.                  |         |
generic(_, _) -> error(stub).              | OK      |
                                           |         |
-spec use_generic_shape                    |         |
    (dyn_map(), #{a => atom()}) -> ok.     |         |
use_generic_shape(DM, S) ->                | ERROR   |
  generic(DM, S).                          |         | generic(DM, S).
                                           |         | Expected: 'ok'
                                           |         | Got     : #S{a => atom()}
                                           |         |
-spec tuple_mismatch(dyn_map()) ->         |         |
  {#{a => atom}, integer()}.               |         |
tuple_mismatch(DM) ->                      | ERROR   |
  {DM, ok}.                                |         | {DM, 'ok'}.
                                           |         | Expected: {#S{a => 'atom'}, number()}
                                           |         | Got     : {dyn_map(), 'ok'}
                                           |         | 
                                           |         |   at tuple index 2:
                                           |         |   {dyn_map(), 'ok'} is not a subtype of {#S{a => 'atom'}, number()}
                                           |         |   because
                                           |         |   'ok' is not a subtype of number()
