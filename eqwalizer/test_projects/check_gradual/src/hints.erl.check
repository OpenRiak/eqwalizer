%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(hints).                            |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec reveal_type1                         |         |
    (atom() | binary()) -> any().          |         |
reveal_type1(A) when is_atom(A) ->         | ERROR   |
    eqwalizer:reveal_type(A),              |         | atom()

    A;                                     |         |
reveal_type1(B) ->                         |         |
    B.                                     |         |
                                           |         |
-type data() ::                            |         |
    {tag1, atom()}                         |         |
    | {tag1, binary()}                     |         |
    | {tag2, pid()}.                       |         |
-spec reveal_type1a(data()) -> atom().     |         |
reveal_type1a({tag1, _A}) ->               | ERROR   |
    eqwalizer:reveal_type(_A),             |         | atom() | binary()

    tag1.                                  |         |
                                           |         |
-spec reveal_type2                         |         |
    (atom() | binary()) -> any().          |         |
reveal_type2(A) when is_atom(A) ->         | ERROR   |
    A;                                     |         |
reveal_type2(B) ->                         |         |
    eqwalizer:reveal_type(B),              |         | none() | binary()

    B.                                     |         |
                                           |         |
-spec reveal_type3                         |         |
    (atom() | binary() | tuple())          |         |
        -> any().                          |         |
reveal_type3(A) when is_atom(A) ->         | ERROR   |
    A;                                     |         |
reveal_type3(BT) ->                        |         |
    eqwalizer:reveal_type(BT),             |         | none() | binary() | tuple()

    BT.                                    |         |
                                           |         |
-spec no_cast() -> atom().                 |         |
no_cast() ->                               | ERROR   |
    Key = get(key),                        |         |
    Key.                                   |         | Key.
                                           |         | Expected: atom()
                                           |         | Got     : term() | 'undefined'
                                           |         | 
                                           |         |   term() | 'undefined' is not a subtype of atom()
                                           |         |   because
                                           |         |   term() is not a subtype of atom()
                                           |         |
-spec cast1() -> atom().                   |         |
cast1() ->                                 | ERROR   |
    Key = get(key),                        |         |
    Key.                                   |         | Key.
                                           |         | Expected: atom()
                                           |         | Got     : term() | 'undefined'
                                           |         | 
                                           |         |   term() | 'undefined' is not a subtype of atom()
                                           |         |   because
                                           |         |   term() is not a subtype of atom()
                                           |         |
-spec reveal_none(none()) -> none().       |         |
reveal_none(X) ->                          | ERROR   |
    eqwalizer:reveal_type(X),              |         | none()

    error(none).                           |         |
