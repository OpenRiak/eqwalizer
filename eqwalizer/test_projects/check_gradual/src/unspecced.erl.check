%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(unspecced).                        |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec expect_none(none()) -> none().       |         |
expect_none(None) -> None.                 | OK      |
                                           |         |
as_map1(#{id := Id}) ->                    | ERROR   |
  expect_none({Id}).                       |         | {Id}.
                                           |         | Expected: none()
                                           |         | Got     : {dynamic()}
                                           |         |
as_map2(M) ->                              | ERROR   |
  Res = maps:map(                          |         |
    fun(_K, V) -> {V} end, M               |         |
  ),                                       |         |
  expect_none(Res).                        |         | Res.
                                           |         | Expected: none()
                                           |         | Got     : #D{dynamic() => {dynamic()}}
                                           |         |
as_map3(M) ->                              | ERROR   |
  Id = maps:get(id, M),                    |         |
  expect_none({Id}).                       |         | {Id}.
                                           |         | Expected: none()
                                           |         | Got     : {dynamic()}
                                           |         |
as_map4(M) ->                              | ERROR   |
  Res = M#{id => 1},                       |         |
  expect_none({Res}).                      |         | {Res}.
                                           |         | Expected: none()
                                           |         | Got     : {dynamic()}
                                           |         |
as_list([H | T]) ->                        | ERROR   |
  Res = {H, T},                            |         |
  expect_none(Res).                        |         | Res.
                                           |         | Expected: none()
                                           |         | Got     : {dynamic(), [dynamic()]}
                                           |         |
as_tuple({E1, _}) ->                       | ERROR   |
  Res = {E1},                              |         |
  expect_none(Res).                        |         | Res.
                                           |         | Expected: none()
                                           |         | Got     : {dynamic()}
                                           |         |
-record(rec, {id :: number()}).            |         |
                                           |         |
get_id_neg1(Rec) ->                        | ERROR   |
  atom_to_binary(Rec#rec.id).              |         | ...#rec.id.
                                           |         | Expected: atom()
                                           |         | Got     : number()
                                           |         |
get_id_neg2(#rec{id = Id}) ->              | OK      |
  atom_to_binary(Id).                      |         |
