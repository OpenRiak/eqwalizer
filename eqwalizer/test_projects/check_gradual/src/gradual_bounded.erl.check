%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(gradual_bounded).                  |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-type dyn(T) :: eqwalizer:dynamic(T).      |         |
                                           |         |
-spec bd_unsafe_01(dyn(a | b)) -> c.       |         |
bd_unsafe_01(V) -> V.                      | OK      |
                                           |         |
-spec bd_unsafe_neg(dyn(a) | b) -> c.      |         |
bd_unsafe_neg(V) -> V.                     | ERROR   | V.
                                           |         | Expression has type:   dyn('a') | 'b'
                                           |         | Context expected type: 'c'
                                           |         | 
                                           |         |   dyn('a') | 'b' is not compatible with 'c'
                                           |         |   because
                                           |         |   'b' is not compatible with 'c'
                                           |         |
-spec bd_unsafe_02(dyn(a) | b) -> b.       |         |
bd_unsafe_02(V) -> V.                      | OK      |
                                           |         |
-spec bd_coerce(a) -> dyn(a).              |         |
bd_coerce(V) -> V.                         | OK      |
                                           |         |
-spec bd_coerce_safe_neg(a) -> dyn(b).     |         |
bd_coerce_safe_neg(V) -> V.                | ERROR   | V.
                                           |         | Expression has type:   'a'
                                           |         | Context expected type: dyn('b')
                                           |         | 
                                           |         |   'a' is not compatible with dyn('b')
                                           |         |   because
                                           |         |   'a' is not compatible with dynamic('b')
                                           |         |   because
                                           |         |   'a' is not compatible with dynamic('b')
                                           |         |   because
                                           |         |   'a' is not compatible with 'b'
                                           |         |
-spec bd_map_01(dyn(#{atom() => atom()}))  |         |
    -> atom().                             |         |
bd_map_01(M) -> maps:get(at, M).           | OK      |
                                           |         |
-spec bd_map_02(dyn(#{atom() => atom()}))  |         |
    -> binary().                           |         |
bd_map_02(M) -> maps:get(at, M).           | OK      |
                                           |         |
-spec bd_map_03(dyn(not_a_map))            |         |
    -> atom().                             |         |
bd_map_03(M) -> maps:get(at, M).           | OK      |
                                           |         |
-spec bd_map_put_01_print                  |         |
    (dyn(#{b => c}))                       |         |
    -> err.                                |         |
bd_map_put_01_print(M) ->                  | ERROR   |
    V = maps:put(42, a, M),                |         |
    eqwalizer:reveal_type(V).              |         | #D{number() | dynamic() => 'a' | dynamic()}

                                           |         |
-spec bd_map_put_02_print                  |         |
    (dyn(#{b => c}))                       |         |
    -> err.                                |         |
bd_map_put_02_print(M) ->                  | ERROR   |
    V = maps:put(a, b, M),                 |         |
    eqwalizer:reveal_type(V).              |         | dynamic(#S{a := 'b', b => 'c'})

                                           |         |
-record(rec, {field :: atom()}).           |         |
                                           |         |
-spec bd_record(dyn(#rec{})) -> none().    |         |
bd_record(R) -> R#rec.field.               | OK      |
                                           |         |
-spec bd_tuple_01(dyn({a, b})) -> c.       |         |
bd_tuple_01({V, _}) -> V.                  | OK      |
                                           |         |
-spec bd_tuple_02(dyn(none())) -> c.       |         |
bd_tuple_02({V, _}) -> V.                  | OK      |
                                           |         |
-spec bd_distrib_print                     |         |
    (dyn({a, b})) -> err.                  |         |
bd_distrib_print({a, V}) -> eqwalizer:reve…… ERROR   | dynamic('b')

                                           |         |
-spec bd_generic_fun(dyn(T), T) -> T.      |         |
bd_generic_fun(_, _) -> throw(impl).       | OK      |
                                           |         |
-spec bd_generics_01()                     |         |
    -> atom() | number().                  |         |
bd_generics_01() ->                        | OK      |
    bd_generic_fun(test, 42).              |         |
                                           |         |
-spec bd_generics_02_neg()                 |         |
    -> number().                           |         |
bd_generics_02_neg() ->                    | ERROR   |
    bd_generic_fun(test, 42).              |         | bd_generic_fun('test', 42).
                                           |         | Expression has type:   'test' | number()
                                           |         | Context expected type: number()
                                           |         | 
                                           |         |   'test' | number() is not compatible with number()
                                           |         |   because
                                           |         |   'test' is not compatible with number()
                                           |         |
-spec bd_generics_03(dyn(number()))        |         |
    -> atom().                             |         |
bd_generics_03(N) ->                       | OK      |
    bd_generic_fun(test, N).               |         |
                                           |         |
-spec bd_generics_04_neg(dyn(number()))    |         |
    -> number().                           |         |
bd_generics_04_neg(N) ->                   | ERROR   |
    bd_generic_fun(test, N).               |         | bd_generic_fun('test', N).
                                           |         | Expression has type:   'test' | dyn(number())
                                           |         | Context expected type: number()
                                           |         | 
                                           |         |   'test' | dyn(number()) is not compatible with number()
                                           |         |   because
                                           |         |   'test' is not compatible with number()
