%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(dynamic_local_funs).               |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec sum([{number(), number()}])          |         |
      -> [number()].                       |         |
sum(L) ->                                  | OK      |
  F = fun({N1, N2}) -> N1 + N2 end,        |         |
  lists:map(F, L).                         |         |
                                           |         |
-spec fold1                                |         |
([{number(), number()}]) -> number().      |         |
fold1(L) ->                                | OK      |
  F = fun({N1, N2}, Acc) ->                |         |
    N1 + N2 + Acc                          |         |
  end,                                     |         |
  lists:foldl(F, 0, L).                    |         |
                                           |         |
-spec fold2_neg                            |         |
([{number(), number()}]) -> atom().        |         |
fold2_neg(L) ->                            | ERROR   |
  F = fun({N1, N2}, Acc) ->                |         |
    N1 + N2 + Acc                          |         |
  end,                                     |         |
  lists:foldl(F, 0, L).                    |         | lists:foldl(F, 0, L).
                                           |         | Expected: atom()
                                           |         | Got     : dynamic() | number()
                                           |         | 
                                           |         |   dynamic() | number() is not a subtype of atom()
                                           |         |   because
                                           |         |   number() is not a subtype of atom()
                                           |         |
-spec fold3_neg                            |         |
([{number(), number()}]) -> number().      |         |
fold3_neg(L) ->                            | ERROR   |
  F = fun({N1, N2}, Acc) ->                |         |
    N1 + N2 + binary_to_atom(Acc)          |         | erlang:binary_to_atom(Acc).
                                           |         | Expected: number()
                                           |         | Got     : atom()
  end,                                     |         |
  lists:foldl(F, 0, L).                    |         |
                                           |         |
-spec test() -> fun((a) -> b).             |         |
test() ->                                  | OK      |
  X = fun(a) -> b end,                     |         |
  X.                                       |         |
                                           |         |
-spec test_arity_neg() -> fun((a) -> b).   |         |
test_arity_neg() ->                        | ERROR   |
  X = fun(a, _) -> b end,                  |         |
  X.                                       |         | X.
                                           |         | Expected: fun(('a') -> 'b')
                                           |         | Got     : fun((dynamic(), dynamic()) -> dynamic())
                                           |         |
-spec fun1a() -> atom().                   |         |
fun1a() ->                                 | OK      |
  X = ok,                                  |         |
  Res = (fun(Z) -> Z end)(X),              |         |
  Res.                                     |         |
                                           |         |
-spec fun1b() -> atom().                   |         |
fun1b() ->                                 | OK      |
  X = ok,                                  |         |
  (fun(Z) -> Z end)(X).                    |         |
                                           |         |
-spec fun2a(boolean()) -> atom().          |         |
fun2a(B) ->                                | OK      |
  Res =                                    |         |
    (fun F() ->                            |         |
      case B of                            |         |
        true -> true;                      |         |
        false -> F()                       |         |
      end                                  |         |
     end)(),                               |         |
  Res.                                     |         |
                                           |         |
-spec fun2b(boolean()) -> atom().          |         |
fun2b(B) ->                                | ERROR   |
  (fun F() ->                              |         |
    case B of                              |         |
      true -> true;                        |         |
      false -> F()                         |         | Unbound var: F

    end                                    |         |
   end)().                                 |         |
                                           |         |
-spec fun3a(boolean(), X) -> X.            |         |
fun3a(B, X) ->                             | OK      |
  Res =                                    |         |
    (fun F(Y) ->                           |         |
      case B of                            |         |
        true -> Y;                         |         |
        false -> F(Y)                      |         |
      end                                  |         |
    end)(X),                               |         |
  Res.                                     |         |
                                           |         |
-spec fun3b(boolean(), X) -> X.            |         |
fun3b(B, X) ->                             | ERROR   |
  (fun F(Y) ->                             |         |
    case B of                              |         |
      true -> Y;                           |         |
      false -> F(Y)                        |         | Unbound var: F

    end                                    |         |
   end)(X).                                |         |
                                           |         |
-spec fun4b() -> pid().                    |         |
fun4b() ->                                 | ERROR   |
  spawn_link(fun F() ->                    |         |
    receive                                |         |
      continue ->                          |         |
        F();                               |         | Unbound var: F

      exit ->                              |         |
        ok                                 |         |
    end                                    |         |
  end),                                    |         |
  ok.                                      |         |
