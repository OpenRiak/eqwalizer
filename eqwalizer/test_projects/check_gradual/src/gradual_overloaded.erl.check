%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(gradual_overloaded).               |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec swap                                 |         |
    (atom()) -> binary();                  |         |
    (binary()) -> atom().                  |         |
swap(A) when is_atom(A) ->                 | OK      |
    atom_to_binary(A);                     |         |
swap(B) when is_binary(B) ->               |         |
    binary_to_atom(B).                     |         |
                                           |         |
-spec extract                              |         |
    ({pid, pid()}) -> pid();               |         |
    ({binary, binary()}) -> binary().      |         |
extract({pid, Pid}) -> Pid;                | OK      |
extract({binary, Bin}) -> Bin.             |         |
                                           |         |
use_swap(X) ->                             | OK      |
    Y = swap(X),                           |         |
    atom_to_binary(Y).                     |         |
                                           |         |
use_extract1(X) ->                         | OK      |
    Y = extract(X),                        |         |
    binary_to_atom(Y).                     |         |
                                           |         |
use_extract2(X) ->                         | OK      |
    Y = extract({binary, X}),              |         |
    binary_to_atom(Y).                     |         |
                                           |         |
use_extract3(X) ->                         | ERROR   |
    Y = extract({pid, X}),                 |         |
    binary_to_atom(Y).                     |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : pid()
                                           |         |
-spec use_swap_specced(binary()) ->        |         |
    binary().                              |         |
use_swap_specced(X) ->                     | OK      |
    Y = swap(X),                           |         |
    atom_to_binary(Y).                     |         |
                                           |         |
-spec use_extract1_specced(                |         |
    {binary, binary()}                     |         |
) -> atom().                               |         |
use_extract1_specced(X) ->                 | OK      |
    Y = extract(X),                        |         |
    binary_to_atom(Y).                     |         |
                                           |         |
dynamic() ->                               | OK      |
    dynamic.                               |         |
                                           |         |
-spec use_swap_one_more_time()             |         |
    -> integer().                          |         |
use_swap_one_more_time() ->                | ERROR   |
    X = dynamic(),                         |         |
    Y = swap(X),                           |         |
    {Y}.                                   |         | {Y}.
                                           |         | Expected: number()
                                           |         | Got     : {dynamic()}
                                           |         |
-spec fst_gen                              |         |
    ({A}) -> A;                            |         |
    ([A]) -> A.                            |         |
fst_gen({A}) -> A;                         | OK      |
fst_gen([A]) -> A.                         |         |
                                           |         |
-spec use_fst_gen1                         |         |
    ({atom()}) -> atom().                  |         |
use_fst_gen1(X) ->                         | OK      |
    fst_gen(X).                            |         |
                                           |         |
-spec use_fst_gen2                         |         |
    ({atom()} | [atom()]) -> atom().       |         |
use_fst_gen2(X) ->                         | OK      |
    fst_gen(X).                            |         |
                                           |         |
-spec use_fst_gen3                         |         |
    (eqwalizer:dynamic())                  |         |
        -> eqwalizer:dynamic().            |         |
use_fst_gen3(X) ->                         | OK      |
    fst_gen(X).                            |         |
                                           |         |
-spec use_fst_gen4                         |         |
    (eqwalizer:dynamic())                  |         |
        -> eqwalizer:dynamic().            |         |
use_fst_gen4(X) ->                         | ERROR   |
    Res = fst_gen(X),                      |         |
    eqwalizer:reveal_type(Res),            |         | dynamic()

    Res.                                   |         |
                                           |         |
-record(r, {count :: integer()}).          |         |
                                           |         |
-spec rec_each                             |         |
    (fun((#r{}) -> #r{}), #r{}) -> #r{};   |         |
    (fun((#r{}) -> #r{}), [#r{}]) -> [#r{}……         |
rec_each(F, R) when is_record(R, r) ->     | OK      |
    F(R);                                  |         |
rec_each(F, Rs) when is_list(Rs) ->        |         |
    lists:map(F, Rs).                      |         |
                                           |         |
-spec rec_each1(#r{}) -> #r{}.             |         |
rec_each1(Rec) ->                          | ERROR   |
    rec_each(                              |         | rec_each(fun, Rec).
                                           |         | Lambdas are not allowed as args to overloaded functions
        fun(R) -> R#r{count = 0} end,      |         |
        Rec                                |         |
    ).                                     |         |
                                           |         |
-spec rec_each2_neg(#r{}) -> atom().       |         |
rec_each2_neg(Rec) ->                      | ERROR   |
    rec_each(                              |         | rec_each(fun, Rec).
                                           |         | Lambdas are not allowed as args to overloaded functions
        fun(R) -> R#r{count = 0} end,      |         |
        Rec                                |         |
    ).                                     |         |
                                           |         |
-spec rec_each3_neg(#r{}) -> atom().       |         |
rec_each3_neg(Rec) ->                      | ERROR   |
    rec_each(                              |         | rec_each(fun, Rec).
                                           |         | Lambdas are not allowed as args to overloaded functions
        fun(I) -> I + 1 end,               |         |
        Rec                                |         |
    ).                                     |         |
                                           |         |
% optimistically assuming dynamic()        |         |
-spec rec_each4                            |         |
    (#r{} | [#r{}]) -> atom().             |         |
rec_each4(Rec) ->                          | ERROR   |
    rec_each(                              |         | rec_each(fun, Rec).
                                           |         | Lambdas are not allowed as args to overloaded functions
        fun(I) -> I + 1 end,               |         |
        Rec                                |         |
    ).                                     |         |
