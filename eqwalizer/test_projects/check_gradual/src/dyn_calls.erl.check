%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(dyn_calls).                        |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec dyn_call_check0                      |         |
(atom(), atom()) -> integer().             |         |
dyn_call_check0(M, F) ->                   | OK      |
  M:F().                                   |         |
                                           |         |
-spec dyn_call_check1                      |         |
(atom(), atom(), integer()) ->             |         |
integer().                                 |         |
dyn_call_check1(M, F, Arg) ->              | OK      |
  M:F(Arg).                                |         |
                                           |         |
-spec dyn_call_check2                      |         |
(atom(), atom(), integer(), atom()) ->     |         |
integer().                                 |         |
dyn_call_check2(M, F, Arg1, Arg2) ->       | OK      |
  M:F(Arg1, Arg2).                         |         |
                                           |         |
-spec dyn_call_eval0                       |         |
(atom(), atom()) -> integer().             |         |
dyn_call_eval0(M, F) ->                    | OK      |
  Res = M:F(),                             |         |
  Res.                                     |         |
                                           |         |
-spec dyn_call_eval1                       |         |
(atom(), atom(), integer()) ->             |         |
integer().                                 |         |
dyn_call_eval1(M, F, Arg) ->               | OK      |
  Res = M:F(Arg),                          |         |
  Res.                                     |         |
                                           |         |
-spec dyn_call_eval2                       |         |
(atom(), atom(), integer(), atom()) ->     |         |
  integer().                               |         |
dyn_call_eval2(M, F, Arg1, Arg2) ->        | OK      |
  Res = M:F(Arg1, Arg2),                   |         |
  Res.                                     |         |
                                           |         |
-spec dyn_arity_neg() -> ok.               |         |
dyn_arity_neg() ->                         | ERROR   |
  (fun() -> res end)(arg),                 |         | fun.
                                           |         | fun with arity 0 used as fun with 1 arguments
  ok.                                      |         |
