%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(redundant_guards).                 |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec redundant_guard_1(ok) -> ok.         |         |
redundant_guard_1(X) ->                    | ERROR   |
    (is_atom(X) orelse error(fail)),       |         | Redundant type test.
                                           |         | Variable X has type 'ok' which is always a subtype of atom()
    X.                                     |         |
                                           |         |
-spec redundant_guard_2(ok) -> ok.         |         |
redundant_guard_2(X) ->                    | ERROR   |
    (X =:= ok orelse error(fail)),         |         | Redundant type test.
                                           |         | Variable X has type 'ok' which is always a subtype of 'ok'
    X.                                     |         |
                                           |         |
-spec redundant_guard_3(ok) -> ok.         |         |
redundant_guard_3(X) ->                    | ERROR   |
    ((is_atom(X) andalso X =:= ok) orelse ……         | Redundant type test.
                                           |         | Variable X has type 'ok' which is always a subtype of atom()
    X.                                     |         |
                                           |         |
-spec redundant_guard_4(ok) -> ok.         |         |
redundant_guard_4(X) ->                    | ERROR   |
    ((ok =:= X andalso is_atom(X)) orelse ……         | Redundant type test.
                                           |         | Variable X has type 'ok' which is always a subtype of 'ok'
    X.                                     |         |
                                           |         |
-spec non_redundant_guard(atom()) -> ok.   |         |
non_redundant_guard(X) ->                  | OK      |
    (X =:= ok orelse error(fail)),         |         |
    X.                                     |         |
