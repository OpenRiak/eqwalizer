{
  "refine": [
    {
      "range": {
        "start": 330,
        "end": 331
      },
      "lineAndCol": null,
      "message": "Expression has type:   _B\nContext expected type: none()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 404,
        "end": 405
      },
      "lineAndCol": null,
      "message": "Expression has type:   {B, A}\nContext expected type: {none(), none()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  at tuple index 1:\n  {B, A} is not compatible with {none(), none()}\n  because\n  B is not compatible with none()"
    },
    {
      "range": {
        "start": 491,
        "end": 492
      },
      "lineAndCol": null,
      "message": "Expression has type:   #D{atom() => atom()}\nContext expected type: none()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "M",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 589,
        "end": 590
      },
      "lineAndCol": null,
      "message": "Expression has type:   fun((B | A) -> A)\nContext expected type: fun((A | B) -> none())",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "F",
      "explanationOrNull": "  fun((B | A) -> A) is not compatible with fun((A | B) -> none())\n  because\n  A is not compatible with none()"
    },
    {
      "range": {
        "start": 702,
        "end": 703
      },
      "lineAndCol": null,
      "message": "Expression has type:   fun((atom() | A) -> A)\nContext expected type: fun((A | atom()) -> none())",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "F",
      "explanationOrNull": "  fun((atom() | A) -> A) is not compatible with fun((A | atom()) -> none())\n  because\n  A is not compatible with none()"
    },
    {
      "range": {
        "start": 1515,
        "end": 1516
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: U",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 1683,
        "end": 1684
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: U",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 1875,
        "end": 1876
      },
      "lineAndCol": null,
      "message": "Expression has type:   _T\nContext expected type: U",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 2082,
        "end": 2085
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: none()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "Val",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 2195,
        "end": 2201
      },
      "lineAndCol": null,
      "message": "Expression has type:   {number(), binary()}\nContext expected type: {none(), none()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "{X, Y}",
      "explanationOrNull": "  at tuple index 1:\n  {number(), binary()} is not compatible with {none(), none()}\n  because\n  number() is not compatible with none()"
    },
    {
      "range": {
        "start": 2375,
        "end": 2381
      },
      "lineAndCol": null,
      "message": "Expression has type:   {number(), atom()}\nContext expected type: {none(), none()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "{N, A}",
      "explanationOrNull": "  at tuple index 1:\n  {number(), atom()} is not compatible with {none(), none()}\n  because\n  number() is not compatible with none()"
    },
    {
      "range": {
        "start": 2619,
        "end": 2620
      },
      "lineAndCol": null,
      "message": "Expression has type:   ['a' | 'b']\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 2698,
        "end": 2699
      },
      "lineAndCol": null,
      "message": "Expression has type:   ['a' | 'b']\nContext expected type: ['a']",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  ['a' | 'b'] is not compatible with ['a']\n  because\n  'a' | 'b' is not compatible with 'a'\n  because\n  'b' is not compatible with 'a'"
    },
    {
      "range": {
        "start": 2823,
        "end": 2824
      },
      "lineAndCol": null,
      "message": "Expression has type:   ['a' | 'b']\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 2903,
        "end": 2904
      },
      "lineAndCol": null,
      "message": "Expression has type:   ['a' | 'b']\nContext expected type: ['a']",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  ['a' | 'b'] is not compatible with ['a']\n  because\n  'a' | 'b' is not compatible with 'a'\n  because\n  'b' is not compatible with 'a'"
    },
    {
      "range": {
        "start": 3077,
        "end": 3080
      },
      "lineAndCol": null,
      "message": "Expression has type:   {'cons', 'nil' | my_list()}\nContext expected type: number()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "Res",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3291,
        "end": 3292
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3395,
        "end": 3396
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3521,
        "end": 3522
      },
      "lineAndCol": null,
      "message": "Expression has type:   term()\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3645,
        "end": 3646
      },
      "lineAndCol": null,
      "message": "Expression has type:   {term(), term()}\nContext expected type: pid()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3738,
        "end": 3739
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: none()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "R",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 3831,
        "end": 3832
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: none()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "R",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4079,
        "end": 4080
      },
      "lineAndCol": null,
      "message": "Expression has type:   tuple()\nContext expected type: #my_rec{}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "R",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4182,
        "end": 4183
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: {'not_my_rec', term(), term()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "R",
      "explanationOrNull": "  at tuple index 1:\n  {'my_rec', number(), atom()} is not compatible with {'not_my_rec', term(), term()}\n  because\n  'my_rec' is not compatible with 'not_my_rec'"
    },
    {
      "range": {
        "start": 4239,
        "end": 4256
      },
      "lineAndCol": null,
      "message": "Unknown id: unknown:unknown/0",
      "uri": "https://fb.me/eqwalizer_errors#unknown_id",
      "code": "unknown_id",
      "expressionOrNull": null,
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4261,
        "end": 4321
      },
      "lineAndCol": null,
      "message": "record_as_tuple7_neg/1 references type with invalid definition: #bad_rec{}",
      "uri": "https://fb.me/eqwalizer_errors#reference_to_invalid_type",
      "code": "reference_to_invalid_type",
      "expressionOrNull": null,
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4552,
        "end": 4553
      },
      "lineAndCol": null,
      "message": "Expression has type:   {'my_rec', atom(), number()}\nContext expected type: #my_rec{}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "R",
      "explanationOrNull": "  at tuple index 2:\n  {'my_rec', atom(), number()} is not compatible with {'my_rec', number(), atom()}\n  because\n  atom() is not compatible with number()"
    },
    {
      "range": {
        "start": 4824,
        "end": 4825
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: number()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4934,
        "end": 4935
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: number()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 4990,
        "end": 4991
      },
      "lineAndCol": null,
      "message": "Expression has type:   fun((T) -> 'ok')\nContext expected type: T",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 5050,
        "end": 5051
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: 'ok'",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": null
    },
    {
      "range": {
        "start": 5261,
        "end": 5262
      },
      "lineAndCol": null,
      "message": "Expression has type:   {'my_rec', atom(), number()}\nContext expected type: #my_rec{}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  at tuple index 2:\n  {'my_rec', atom(), number()} is not compatible with {'my_rec', number(), atom()}\n  because\n  atom() is not compatible with number()"
    },
    {
      "range": {
        "start": 5473,
        "end": 5474
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: {'my_rec', atom(), number()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  at tuple index 2:\n  {'my_rec', number(), atom()} is not compatible with {'my_rec', atom(), number()}\n  because\n  number() is not compatible with atom()"
    },
    {
      "range": {
        "start": 5717,
        "end": 5718
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{}\nContext expected type: {'my_rec', atom(), atom()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  at tuple index 2:\n  {'my_rec', number(), atom()} is not compatible with {'my_rec', atom(), atom()}\n  because\n  number() is not compatible with atom()"
    },
    {
      "range": {
        "start": 5781,
        "end": 5791
      },
      "lineAndCol": null,
      "message": "Expression has type:   atom() | number()\nContext expected type: number()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "ttt1(X, 1)",
      "explanationOrNull": "  atom() | number() is not compatible with number()\n  because\n  atom() is not compatible with number()"
    },
    {
      "range": {
        "start": 5852,
        "end": 5853
      },
      "lineAndCol": null,
      "message": "Expression has type:   #my_rec{} | 'a'\nContext expected type: {'my_rec', term(), term()}",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "X",
      "explanationOrNull": "  #my_rec{} | 'a' is not compatible with {'my_rec', term(), term()}\n  because\n  'a' is not compatible with {'my_rec', term(), term()}"
    },
    {
      "range": {
        "start": 6043,
        "end": 6044
      },
      "lineAndCol": null,
      "message": "Expression has type:   'undefined' | binary()\nContext expected type: binary()",
      "uri": "https://fb.me/eqwalizer_errors#incompatible_types",
      "code": "incompatible_types",
      "expressionOrNull": "B",
      "explanationOrNull": "  'undefined' | binary() is not compatible with binary()\n  because\n  'undefined' is not compatible with binary()"
    },
    {
      "range": {
        "start": 7691,
        "end": 7695
      },
      "lineAndCol": null,
      "message": "atom()",
      "uri": "https://fb.me/eqwalizer_errors#reveal_type",
      "code": "reveal_type",
      "expressionOrNull": null,
      "explanationOrNull": null
    }
  ]
}
