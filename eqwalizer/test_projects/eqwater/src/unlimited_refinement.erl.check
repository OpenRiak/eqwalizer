%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(unlimited_refinement).             |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-eqwalizer({unlimited_refinement, foo/1}). |         |
                                           |         |
-spec foo                                  |         |
    (binary() | integer()) -> boolean().   |         |
foo(B) when is_binary(B) ->                | OK      |
  foo(binary_to_integer(B));               |         |
foo(X) when 100 =< X, X =< 200 ->          |         |
  true;                                    |         |
foo(X) when 300 =< X, X =< 400 ->          |         |
  true;                                    |         |
foo(X) when 500 =< X, X =< 600 ->          |         |
  true;                                    |         |
foo(X) when 700 =< X, X =< 800 ->          |         |
  true;                                    |         |
foo(X) when 900 =< X, X =< 1000 ->         |         |
  true;                                    |         |
foo(X) when 1100 =< X, X =< 1200 ->        |         |
  true;                                    |         |
foo(X) when 1300 =< X, X =< 1400 ->        |         |
  true;                                    |         |
foo(X) when 1500 =< X, X =< 1600 ->        |         |
  true;                                    |         |
foo(X) ->                                  |         |
  is_special(X).                           |         |
                                           |         |
-spec is_special                           |         |
    (integer()) -> boolean().              |         |
is_special(_N) ->                          | OK      |
  false.                                   |         |
                                           |         |
-spec bar                                  |         |
    (binary() | integer()) -> boolean().   |         |
bar(B) when is_binary(B) ->                | ERROR   |
  foo(binary_to_integer(B));               |         |
bar(X) when 100 =< X, X =< 200 ->          |         |
  true;                                    |         |
bar(X) when 300 =< X, X =< 400 ->          |         |
  true;                                    |         |
bar(X) when 500 =< X, X =< 600 ->          |         |
  true;                                    |         |
bar(X) when 700 =< X, X =< 800 ->          |         |
  true;                                    |         |
bar(X) when 900 =< X, X =< 1000 ->         |         |
  true;                                    |         |
bar(X) when 1100 =< X, X =< 1200 ->        |         |
  true;                                    |         |
bar(X) when 1300 =< X, X =< 1400 ->        |         |
  true;                                    |         |
bar(X) when 1500 =< X, X =< 1600 ->        |         |
  true;                                    |         |
bar(X) ->                                  |         |
  is_special(X).                           |         | X.
                                           |         | Expression has type:   binary() | number()
                                           |         | Context expected type: number()
                                           |         | 
                                           |         |   binary() | number() is not compatible with number()
                                           |         |   because
                                           |         |   binary() is not compatible with number()
                                           |         |
-type map1() :: #{k11 := term(), k12 := te……         |
-type map2() :: #{k21 := term(), k22 := te……         |
-type map3() :: #{k31 := term(), k32 := te……         |
-type map4() :: #{k41 := term(), k42 := te……         |
-type map5() :: #{k51 := term(), k52 := te……         |
-type map6() :: #{k61 := term(), k62 := te……         |
-type map7() :: #{k71 := term(), k72 := te……         |
-type map8() :: #{k81 := term(), k82 := te……         |
-type map9() :: #{k91 := term(), k92 := te……         |
-type or_map() ::                          |         |
    #{ty := ok1, data := map1()} |         |         |
    #{ty := ok2, data := map2()} |         |         |
    #{ty := ok3, data := map3()} |         |         |
    #{ty := ok4, data := map4()} |         |         |
    #{ty := ok5, data := map5()} |         |         |
    #{ty := ok6, data := map6()} |         |         |
    #{ty := ok7, data := map7()} |         |         |
    #{ty := ok8, data := map8()} |         |         |
    #{ty := ok9, data := map9()}.          |         |
                                           |         |
-spec map_union_neg(or_map()) -> ok.       |         |
map_union_neg(#{ty := Ty, data := Data}) -…… ERROR   |
    case {Ty, Data} of                     |         |
        {ok1, #{k11 := V1, k12 := V2, k13 ……         |
        {ok2, #{k21 := V1, k22 := V2, k23 ……         |
        {ok3, #{k31 := V1, k32 := V2, k33 ……         |
        {ok4, #{k41 := V1, k42 := V2, k43 ……         |
        {ok5, #{k51 := V1, k52 := V2, k53 ……         |
        {ok6, #{k61 := V1, k62 := V2, k63 ……         |
        {ok7, #{k71 := V1, k72 := V2, k73 ……         |
        {ok8, #{k81 := V1, k82 := V2, k83 ……         |
        {ok9, #{k91 := V1, k92 := V2, k93 ……         |
        V -> V                             |         | V.
                                           |         | Expression has type:   {'ok4' | 'ok3' | 'ok8' | 'ok2' | 'ok9' | 'ok1' | 'ok6' | 'ok5' | 'ok7', map4() | map3() | map8() | map2() | map9() | map1() | map6() | map5() | map7()}
                                           |         | Context expected type: 'ok'
    end.                                   |         |
